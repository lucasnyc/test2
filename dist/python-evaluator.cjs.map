{"version":3,"file":"python-evaluator.cjs","sources":["../src/cse-machine/heap.ts","../src/cse-machine/py_environment.ts","../src/cse-machine/marshal.ts","../src/cse-machine/py_closure.ts","../src/cse-machine/stack.ts","../src/cse-machine/py_control.ts","../src/cse-machine/py_types.ts","../src/cse-machine/py_instrCreator.ts","../src/types.ts","../src/errors/py_runtimeSourceError.ts","../src/tokens.ts","../src/py_stdlib.ts","../src/cse-machine/py_utils.ts","../src/errors/py_errors.ts","../src/cse-machine/py_operators.ts","../src/cse-machine/py_interpreter.ts","../src/errors/errors.ts","../src/errors.ts","../src/tokenizer.ts","../src/ast-types.ts","../src/parser.ts","../node_modules/fastest-levenshtein/esm/mod.js","../node_modules/fast-levenshtein/levenshtein.js","../src/resolver.ts","../src/modules/errors.ts","../src/modules/requireProvider.ts","../src/modules/loader.ts","../node_modules/@sourceacademy/conductor/dist/conductor/types/moduleInterface/index.js","../node_modules/@sourceacademy/conductor/dist/ServiceMessageType-BXlK0ft1.js","../node_modules/@sourceacademy/conductor/dist/Constant-CYzoK6Kj.js","../node_modules/@sourceacademy/conductor/dist/RunnerStatus-Vg091wbM.js","../src/conductor/PyDataHandler.ts","../src/modules/preprocessor.ts","../src/runner/pyRunner.ts","../src/cse-machine/stash.ts","../src/cse-machine/py_context.ts","../src/conductor/PyEvaluator.ts"],"sourcesContent":["import { Environment } from './environment';\nimport { PyClosure, JsClosure } from './py_closure';\n\n// Every array also has the properties `id` and `environment` for use in the frontend CSE Machine\nexport type EnvArray = any[] & {\n  readonly id: string\n  environment: Environment\n}\n\n// Objects in the heap can only store arrays or closures\nexport type HeapObject = EnvArray | PyClosure | JsClosure\n\n/**\n * The heap stores all objects in each environment.\n */\nexport class Heap {\n  private storage: Set<HeapObject> | null = null\n\n  public constructor() {}\n\n  add(...items: HeapObject[]): void {\n    this.storage ??= new Set<HeapObject>()\n    for (const item of items) {\n      this.storage.add(item)\n    }\n  }\n\n  /** Checks the existence of `item` in the heap. */\n  contains(item: any): boolean {\n    return this.storage?.has(item) ?? false\n  }\n\n  /** Gets the number of items in the heap. */\n  size(): number {\n    return this.storage?.size ?? 0\n  }\n\n  /**\n   * Removes `item` from current heap and adds it to `otherHeap`.\n   * If the current heap does not contain `item`, nothing happens.\n   * @returns whether the item transfer is successful\n   */\n  move(item: HeapObject, otherHeap: Heap): boolean {\n    if (!this.contains(item)) return false\n    this.storage!.delete(item)\n    otherHeap.add(item)\n    return true\n  }\n\n  /** Returns a copy of the heap's contents. */\n  getHeap(): Set<HeapObject> {\n    return new Set(this.storage)\n  }\n}\n","import { Value } from './stash';\nimport { Heap } from './heap';\nimport { PyClosure } from './py_closure';\nimport { PyContext } from './py_context';\nimport { PyNode } from './py_types';\nimport { ExprNS, StmtNS } from '../ast-types';\n\n\nexport interface Frame {\n  [name: string]: any\n}\n\nexport interface PyEnvironment {\n  readonly id: string\n  name: string\n  tail: PyEnvironment | null\n  callExpression?: ExprNS.Call;\n  head: Frame\n  heap: Heap\n  thisContext?: Value\n  closure?: PyClosure\n}\n\nexport const uniqueId = (context: PyContext): string => {\n  return `${context.runtime.objectCount++}`\n}\n\nexport const createEnvironment = (\n  context: PyContext,\n  closure: PyClosure,\n  args: Value[],\n  callExpression: ExprNS.Call\n): PyEnvironment => {\n  const environment: PyEnvironment = {\n    name: closure.node.constructor.name === 'FunctionDef' ? (closure.node as StmtNS.FunctionDef).name.lexeme: 'lambda',\n    tail: closure.environment,\n    head: {},\n    heap: new Heap(),\n    id: uniqueId(context),\n    callExpression: callExpression,\n    closure: closure\n  }\n  \n  closure.node.parameters.forEach((paramToken, index) => {\n    const paramName = paramToken.lexeme;\n    environment.head[paramName] = args[index];\n  });\n  return environment\n}\n\nexport const createSimpleEnvironment = (\n  context: PyContext,\n  name: string,\n  tail: PyEnvironment | null = null\n): PyEnvironment => {\n  return {\n    id: uniqueId(context),\n    name,\n    tail,\n    head: {},\n    heap: new Heap(),\n    // TODO: callExpression and thisContext are optional and can be provided as needed.\n  };\n};\n\nexport const createProgramEnvironment = (context: PyContext, isPrelude: boolean): PyEnvironment => {\n  return createSimpleEnvironment(context, isPrelude ? 'prelude' : 'programEnvironment');\n};\n\nexport const createBlockEnvironment = (\n  context: PyContext,\n  name = 'blockEnvironment'\n): PyEnvironment => {\n  return {\n    name,\n    tail: currentEnvironment(context),\n    head: {},\n    heap: new Heap(),\n    id: uniqueId(context)\n  }\n}\n\n// export const isRestElement = (node: Node): node is es.RestElement => {\n//   return (node as es.RestElement).type === 'RestElement';\n// };\n\n// export const handleArrayCreation = (\n//   context: PyContext,\n//   array: any[],\n//   envOverride?: PyEnvironment\n// ): void => {\n//   const environment = envOverride ?? currentEnvironment(context);\n//   Object.defineProperties(array, {\n//     id: { value: uniqueId(context) },\n//     environment: { value: environment, writable: true }\n//   });\n//   environment.heap.add(array as any);\n// };\n\nexport const currentEnvironment = (context: PyContext): PyEnvironment => {\n  return context.runtime.environments[0];\n};\n\nexport const popEnvironment = (context: PyContext) => context.runtime.environments.shift()\n\nexport const pushEnvironment = (context: PyContext, environment: PyEnvironment) => {\n  context.runtime.environments.unshift(environment)\n  context.runtime.environmentTree.insert(environment)\n}\n","import { PyContext } from \"./py_context\";\nimport { Value } from \"./stash\";\n\n/**\n *  Marshal JS value into a py-slang Value representation\n *  @param value The JS value to marshal\n *  @param context PyContext\n *  @returns py-slang Value \n */\nexport function marshalToPy(value: any, context: PyContext): Value {\n    if (typeof value === 'bigint') {\n        return { type: 'bigint', value};\n    } else if (typeof value === 'number') {\n        return { type: 'number', value};\n    } else if (typeof value === 'string') {\n        return { type: 'string', value};\n    } else if (typeof value === 'boolean') {\n        return { type: 'bool', value};\n    } else if (value === null || value === undefined) {\n        return { type: 'undefined' };\n    }\n    // TODO: implementation for more types such as list or dicts\n    // We do not include complex numbers of other objects from JS for now\n    throw new Error(`Marshalling of Javascript type '${typeof value} is not implemented.`);\n}\n\n/**\n * Unmarshal py-slang Value into its JS representation\n * @param value py-slang Value to unmarshal\n * @returns JS value\n */\nexport function unmarshalFromPy(value: Value): any {\n    if (!value || typeof value.type !== 'string') {\n        return value;\n    }\n    \n    switch (value.type) {\n        case 'bigint':\n        case 'number':\n        case 'string':\n        case 'bool':\n            return value.value;\n        case 'complex':\n            throw new Error('Passing complex number to external functions is not supported.');\n        default:\n            throw new Error(`Unmarshalling of py-slang type '${value.type}' is not supported for external functions.`);\n        \n    }\n}","import { StmtNS, ExprNS } from '../ast-types'\nimport { PyEnvironment, uniqueId } from './py_environment'\nimport { PyContext } from './py_context'\nimport { StatementSequence } from './py_types'\nimport { PyControlItem } from './py_control'\nimport { IFunctionSignature } from '@sourceacademy/conductor/types'\nimport { Value } from './stash'\nimport { marshalToPy, unmarshalFromPy } from './marshal'\n\n/**\n * Represents a python closure, the class is a runtime representation of a function.\n * Bundles the function's code (AST node) with environment in which its defined.\n * When Closure is called, a new environment will be created whose parent is the 'Environment' captured\n */\nexport class PyClosure {\n  public readonly type = 'PyClosure';\n  public readonly id: string\n  /** AST node for function, either a 'def' or 'lambda' */\n  public node: StmtNS.FunctionDef | ExprNS.Lambda;\n  /** Environment captures at time of function's definition, key for lexical scoping */\n  public environment: PyEnvironment;\n  public context: PyContext;\n  public readonly predefined: boolean;\n  public originalNode?: StmtNS.FunctionDef | ExprNS.Lambda;\n  /** Stores local variables for scope check */\n  public localVariables: Set<string>;\n\n  constructor(\n    node: StmtNS.FunctionDef | ExprNS.Lambda,\n    environment: PyEnvironment,\n    context: PyContext,\n    predefined: boolean = false,\n    localVariables: Set<string> = new Set()\n) {\n      this.id = uniqueId(context);\n      this.node = node;\n      this.environment = environment;\n      this.context = context;\n      this.predefined = predefined;\n      this.originalNode = node;\n      this.localVariables = localVariables;\n  }\n\n  /** \n   * Creates closure for FunctionDef\n   */\n  static makeFromFunctionDef (\n    node: StmtNS.FunctionDef,\n    environment: PyEnvironment,\n    context: PyContext,\n    localVariables: Set<string>\n  ): PyClosure {\n    const closure = new PyClosure(node, environment, context, false, localVariables);\n    return closure;\n  }\n\n  /**\n   * Creates closure for Lambda\n   */\n  static makeFromLambda(\n       node: ExprNS.Lambda,\n       environment: PyEnvironment,\n       context: PyContext,\n       localVariables: Set<string>\n     ): PyClosure {\n       const closure = new PyClosure(node, environment, context, false, localVariables);\n       return closure;\n     }\n   }\n\n/**\n* Type guard to check if a control item is a StatementSequence.\n*/\nexport const isStatementSequence = (node: PyControlItem): node is StatementSequence => {\n  return (node as StatementSequence).type === 'StatementSequence';\n};\n\n/**\n * Represents a Javascript function that has been imported into js-slang from modules/\n * Wraps the JS function and marshal data between two languages\n * 1. Arguments from py-slang is marshalled to JS values\n * 2. Function call\n * 3. Return value from JS is marshalled back into py-slang value\n */\nexport class JsClosure {\n  public readonly type = 'JsClosure';\n  public readonly id: string;\n\n  constructor(\n    public signature: IFunctionSignature<any, any>,\n    public func: (...args: any[]) => any,\n    private context: PyContext,\n  ) {\n    this.id = uniqueId(context);\n  }\n\n  public call(args: Value[]): Value {\n    const jsArgument = args.map(unmarshalFromPy);\n    const result = this.func(...jsArgument);\n    return marshalToPy(result, this.context);\n  }\n}","/**\n * Stack is implemented for control and stash registers.\n */\ninterface IStack<T> {\n  push(...items: T[]): void\n  pop(): T | undefined\n  peek(): T | undefined\n  size(): number\n  isEmpty(): boolean\n  getStack(): T[]\n}\n\nexport class Stack<T> implements IStack<T> {\n  // Bottom of the array is at index 0\n  public storage: T[] = []\n\n  public constructor() {}\n\n  public push(...items: T[]): void {\n    for (const item of items) {\n      this.storage.push(item)\n    }\n  }\n\n  public pop(): T | undefined {\n    return this.storage.pop()\n  }\n\n  public peek(): T | undefined {\n    if (this.isEmpty()) {\n      return undefined\n    }\n    return this.storage[this.size() - 1]\n  }\n\n  public size(): number {\n    return this.storage.length\n  }\n\n  public isEmpty(): boolean {\n    return this.size() == 0\n  }\n\n  public getStack(): T[] {\n    // return a copy of the stack's contents\n    return [...this.storage]\n  }\n\n  public some(predicate: (value: T) => boolean): boolean {\n    return this.storage.some(predicate)\n  }\n}\n\n","import { Stack } from \"./stack\";\nimport { PyNode, Instr } from \"./py_types\";\nimport { StmtNS } from \"../ast-types\";\nimport { isEnvDependent } from './utils'; // TODO\nimport { StatementSequence } from \"./py_types\";\n\nexport type PyControlItem = (PyNode | Instr) & {\n  isEnvDependent?: boolean;\n  skipEnv?: boolean;\n};\n\n\nexport class PyControl extends Stack<PyControlItem> {\n  private numEnvDependentItems: number;\n  public constructor(program?: StmtNS.Stmt) {\n    super()\n    this.numEnvDependentItems = 0\n    // Load program into control stack\n    program ? this.push(program) : null\n  }\n\n  public canAvoidEnvInstr(): boolean {\n    return this.numEnvDependentItems === 0\n  }\n\n  // For testing purposes\n  public getNumEnvDependentItems(): number {\n    return this.numEnvDependentItems\n  }\n\n// TODO in the future\n//   public pop(): PyControlItem | undefined {\n//       const item = super.pop();\n//       if (item !== undefined && isEnvDependent(item)) {\n//         this.numEnvDependentItems--;\n//       }\n//       return item;\n//     }\n//   public push(...items: PyControlItem[]): void {\n//     items.forEach((item: PyControlItem) => {\n//     // We keep this logic for future use with the stepper.\n//     if (isEnvDependent(item)) {\n//         this.numEnvDependentItems++;\n//     }\n//     });\n//   super.push(...items);\n//   }\n\n  public copy(): PyControl {\n    const newControl = new PyControl();\n    const stackCopy = super.getStack();\n    newControl.push(...stackCopy);\n    return newControl;\n  }\n}","import { Environment } from './environment';\nimport { StmtNS, ExprNS } from '../ast-types';\nimport { TokenType } from '../tokens';\n\nexport type PyNode = StmtNS.Stmt | ExprNS.Expr | StatementSequence;\n\nexport interface StatementSequence {\n       type: 'StatementSequence';\n       body: StmtNS.Stmt[];\n       loc?: {\n           start: { line: number; column: number };\n           end: { line: number; column: number };\n       };\n   }\n\nexport enum InstrType {\n    END_OF_FUNCTION_BODY = \"EndOfFunctionBody\",\n    RESET = 'Reset',\n    WHILE = 'While',\n    FOR = 'For',\n    ASSIGNMENT = 'Assignment',\n    ANN_ASSIGNMENT = 'AnnAssignment',\n    APPLICATION = 'Application',\n    UNARY_OP = 'UnaryOperation',\n    BINARY_OP = 'BinaryOperation',\n    BOOL_OP = 'BoolOperation',\n    COMPARE = 'Compare',\n    CALL = 'Call',\n    RETURN = 'Return',\n    BREAK = 'Break',\n    CONTINUE = 'Continue',\n    IF = 'If',\n    FUNCTION_DEF = 'FunctionDef',\n    LAMBDA = 'Lambda',\n    MULTI_LAMBDA = 'MultiLambda',\n    GROUPING = 'Grouping',\n    LITERAL = 'Literal',\n    VARIABLE = 'Variable',\n    TERNARY = 'Ternary',\n    PASS = 'Pass',\n    ASSERT = 'Assert',\n    IMPORT = 'Import',\n    GLOBAL = 'Global',\n    NONLOCAL = 'NonLocal',\n    Program = 'Program',\n    BRANCH = 'Branch',\n    POP = 'Pop',\n    ENVIRONMENT = 'environment',\n    MARKER = 'marker',\n}\n\ninterface BaseInstr {\n  instrType: InstrType\n  srcNode: PyNode\n  isEnvDependent?: boolean\n}\n\nexport interface WhileInstr extends BaseInstr {\n  test: PyNode\n  body: PyNode\n}\n\n// TODO: more strict type in the future\nexport interface ForInstr extends BaseInstr {\n  init: PyNode\n  test: PyNode\n  update: PyNode\n  body: PyNode\n}\n\nexport interface AssmtInstr extends BaseInstr {\n  instrType: InstrType.ASSIGNMENT;\n  symbol: string;\n  constant: boolean;\n  declaration: boolean;\n}\n\nexport interface UnOpInstr extends BaseInstr {\n  instrType: InstrType.UNARY_OP;\n  symbol: TokenType;\n}\n\nexport interface BinOpInstr extends BaseInstr {\n  instrType: InstrType.BINARY_OP;\n  symbol: TokenType;\n}\n\nexport interface BoolOpInstr extends BaseInstr {\n  instrType: InstrType.BOOL_OP;\n  symbol: TokenType;\n}\n\nexport interface AppInstr extends BaseInstr {\n  instrType: InstrType.APPLICATION;\n  numOfArgs: number;\n  srcNode: PyNode;\n}\n\nexport interface EndOfFunctionBodyInstr extends BaseInstr {\n  instrType: InstrType.END_OF_FUNCTION_BODY;\n}\n\nexport interface ResetInstr extends BaseInstr {\n  instrType: InstrType.RESET;\n}\n\nexport interface BranchInstr extends BaseInstr {\n  consequent: PyNode\n  alternate: PyNode | null | undefined\n}\n\nexport interface PopInstr extends BaseInstr {\n  instrType: InstrType.POP;\n}\n\nexport interface EnvInstr extends BaseInstr {\n  env: Environment\n}\n\nexport interface ArrLitInstr extends BaseInstr {\n  arity: number\n}\n\nexport type Instr =\n  | BaseInstr\n  | WhileInstr\n  | ForInstr\n  | AssmtInstr\n  | AppInstr\n  | EndOfFunctionBodyInstr\n  | ResetInstr\n  | BranchInstr\n  | PopInstr\n  | EnvInstr\n  | ArrLitInstr\n  | UnOpInstr\n  | BinOpInstr\n  | BoolOpInstr","import { Environment } from \"./environment\";\nimport { AppInstr, AssmtInstr, BinOpInstr, BranchInstr, EnvInstr, Instr, InstrType, PyNode, UnOpInstr, BoolOpInstr, EndOfFunctionBodyInstr } from \"./py_types\";\nimport { TokenType } from \"../tokens\";\n\nexport const popInstr = (srcNode: PyNode): Instr => ({ \n  instrType: InstrType.POP, \n  srcNode \n})\n\nexport const assmtInstr = (\n  symbol: string,\n  constant: boolean,\n  declaration: boolean,\n  srcNode: PyNode\n): AssmtInstr => ({\n  instrType: InstrType.ASSIGNMENT,\n  symbol,\n  constant,\n  declaration,\n  srcNode\n})\n\nexport const appInstr = (numOfArgs: number, srcNode: PyNode): AppInstr => ({\n  instrType: InstrType.APPLICATION,\n  numOfArgs,\n  srcNode\n})\n\nexport const envInstr = (env: Environment, srcNode: PyNode): EnvInstr => ({\n  instrType: InstrType.ENVIRONMENT,\n  env,\n  srcNode\n})\n\nexport const markerInstr = (srcNode: PyNode): Instr => ({\n  instrType: InstrType.MARKER,\n  srcNode\n})\n\nexport const binOpInstr = (symbol: any, srcNode: PyNode): BinOpInstr => ({\n  instrType: InstrType.BINARY_OP,\n  symbol,\n  srcNode\n})\n\nexport const resetInstr = (srcNode: PyNode): Instr => ({\n  instrType: InstrType.RESET,\n  srcNode\n})\n\nexport const branchInstr = (\n  consequent: PyNode,\n  alternate: PyNode | null | undefined,\n  srcNode: PyNode\n): BranchInstr => ({\n  instrType: InstrType.BRANCH,\n  consequent,\n  alternate,\n  srcNode\n})\n\nexport const unOpInstr = (symbol: TokenType, srcNode: PyNode): UnOpInstr => ({\n  instrType: InstrType.UNARY_OP,\n  symbol,\n  srcNode\n})\n\nexport const boolOpInstr = (symbol: TokenType, srcNode: PyNode): BoolOpInstr => ({\n  instrType: InstrType.BOOL_OP,\n  symbol,\n  srcNode\n});\n\nexport const endOfFunctionBodyInstr = (srcNode: PyNode): EndOfFunctionBodyInstr => ({\n  instrType: InstrType.END_OF_FUNCTION_BODY,\n  srcNode\n})","import { toPythonString } from './stdlib'\nimport { Value } from './cse-machine/stash'\nimport { Context } from './cse-machine/context'\nimport { ModuleFunctions } from './modules/moduleTypes'\nimport { PyContext } from './cse-machine/py_context'\nimport { PyControl } from './cse-machine/py_control'\nimport { IRunnerPlugin } from '@sourceacademy/conductor/runner'\n\nexport class CSEBreak {}\n\n// export class CseError {\n//     constructor(public readonly error: any) {}\n// }\n\n/**\n * Represents a specific position in source code\n * Line is 1-based, Column is 0-based\n */\nexport interface SourcePosition {\n    line: number;\n    column: number;\n}\n\n/**\n * Represents the span of code within source code from start to end\n * Can be null if source code is not available\n */\nexport interface SourceLocation {\n    source?: string | null;\n    start: SourcePosition;\n    end: SourcePosition;\n}\n\nexport enum ErrorType {\n    IMPORT = 'Import',\n    RUNTIME = 'Runtime',\n    SYNTAX = 'Syntax',\n    TYPE = 'Type'\n}\n\nexport enum ErrorSeverity {\n    WARNING = 'Warning',\n    ERROR = 'Error'\n}\n\n// any and all errors ultimately implement this interface. as such, changes to this will affect every type of error.\nexport interface SourceError {\n    type: ErrorType\n    severity: ErrorSeverity\n    location: SourceLocation\n    explain(): string\n    elaborate(): string\n}\n\nexport class PyComplexNumber {\n    public real: number;\n    public imag: number;\n\n    constructor(real: number, imag: number) {\n        this.real = real;\n        this.imag = imag;\n    }\n\n    public static fromNumber(value: number): PyComplexNumber {\n        return new PyComplexNumber(value, 0);\n    }\n\n    public static fromBigInt(value: bigint): PyComplexNumber {\n        return new PyComplexNumber(Number(value), 0);\n    }\n\n    public static fromString(str: string): PyComplexNumber {\n        if (!/[jJ]/.test(str)) {\n            const realVal = Number(str);\n            if (isNaN(realVal)) {\n                throw new Error(`Invalid complex string: ${str}`);\n            }\n            return new PyComplexNumber(realVal, 0);\n        }\n\n        const lower = str.toLowerCase();\n        if (lower.endsWith('j')) {\n            const numericPart = str.substring(0, str.length - 1);\n            if (numericPart === '' || numericPart === '+' || numericPart === '-') {\n                const sign = (numericPart === '-') ? -1 : 1;\n                return new PyComplexNumber(0, sign * 1);\n            }\n\n            const imagVal = Number(numericPart);\n            if (isNaN(imagVal)) {\n                throw new Error(`Invalid complex string: ${str}`);\n            }\n            return new PyComplexNumber(0, imagVal);\n        }\n\n        const match = str.match(/^([\\+\\-]?\\d+(\\.\\d+)?([eE][+\\-]?\\d+)?)([\\+\\-]\\d+(\\.\\d+)?([eE][+\\-]?\\d+)?)?[jJ]?$/);\n        if (!match) {\n            throw new Error(`Invalid complex string: ${str}`);\n        }\n\n        const realPart = Number(match[1]);\n        let imagPart = 0;\n\n        if (match[4]) {\n            imagPart = Number(match[4]);\n        }\n\n        return new PyComplexNumber(realPart, imagPart);\n    }\n\n    public static fromValue(value: number | bigint | string | PyComplexNumber): PyComplexNumber {\n        if (value instanceof PyComplexNumber) {\n            return new PyComplexNumber(value.real, value.imag);\n        }\n        if (typeof value === \"number\") {\n            return PyComplexNumber.fromNumber(value);\n        }\n        if (typeof value === \"bigint\") {\n            return PyComplexNumber.fromBigInt(value);\n        }\n        return PyComplexNumber.fromString(value);\n    }\n\n    /**\n     * operations\n     */\n    public add(other: PyComplexNumber): PyComplexNumber {\n        return new PyComplexNumber(this.real + other.real, this.imag + other.imag);\n    }\n\n    public sub(other: PyComplexNumber): PyComplexNumber {\n        return new PyComplexNumber(this.real - other.real, this.imag - other.imag);\n    }\n\n    public mul(other: PyComplexNumber): PyComplexNumber {\n        // (a+bi)*(c+di) = (ac - bd) + (bc + ad)i\n        const realPart = this.real * other.real - this.imag * other.imag;\n        const imagPart = this.real * other.imag + this.imag * other.real;\n        return new PyComplexNumber(realPart, imagPart);\n    }\n\n    // https://github.com/python/cpython/blob/main/Objects/complexobject.c#L986\n    // In the CPython source code, a branch algorithm is used for complex division.\n    // It first compares the magnitudes of the dividend and divisor, and if some components are too large or too small, \n    // appropriate scaling is applied before performing the operation. \n    // This approach can significantly reduce overflow or underflow, thereby ensuring that the results remain more consistent with Python.\n    public div(other: PyComplexNumber): PyComplexNumber {\n        // (a+bi)/(c+di) = ((a+bi)*(c-di)) / (c^2 + d^2)\n        const denominator = other.real * other.real + other.imag * other.imag;\n        if (denominator === 0) {\n            throw new Error(`Division by zero in complex number.`);\n        }\n\n        const a = this.real;\n        const b = this.imag;\n        const c = other.real;\n        const d = other.imag;\n\n        const absC = Math.abs(c);\n        const absD = Math.abs(d);\n\n        let real: number;\n        let imag: number;\n        if (absD < absC) {\n            const ratio = d / c;\n            const denom = c + d * ratio; // c + d*(d/c) = c + d^2/c\n            real = (a + b * ratio) / denom;\n            imag = (b - a * ratio) / denom;\n        } else {\n            const ratio = c / d;\n            const denom = d + c * ratio; // d + c*(c/d) = d + c^2/d\n            real = (a * ratio + b) / denom;\n            imag = (b * ratio - a) / denom;\n        }\n        \n        return new PyComplexNumber(real, imag);\n\n        //const numerator = this.mul(new PyComplexNumber(other.real, -other.imag));\n        //return new PyComplexNumber(numerator.real / denominator, numerator.imag / denominator);\n    }\n\n    public pow(other: PyComplexNumber): PyComplexNumber {\n        // z = this (a+bi), w = other (A+Bi)\n        const a = this.real;\n        const b = this.imag;\n        const A = other.real;\n        const B = other.imag;\n    \n        const r = Math.sqrt(a * a + b * b);\n        const theta = Math.atan2(b, a);\n    \n        if (r === 0) {\n            // In Python, raising 0 to a negative or complex power raises an error.\n            // For example, 0**(1j) in CPython directly raises ValueError: complex power.\n            if (A < 0 || B !== 0) {\n                throw new Error('0 cannot be raised to a negative or complex power');\n            }\n            // Otherwise, 0**(positive number) = 0.\n            return new PyComplexNumber(0, 0);\n        }\n    \n        const logR = Math.log(r);\n    \n        // realExpPart = A*ln(r) - B*theta\n        // imagExpPart = B*ln(r) + A*theta\n        const realExpPart = A * logR - B * theta;\n        const imagExpPart = B * logR + A * theta;\n    \n        // e^(x + i y) = e^x [cos(y) + i sin(y)]\n        const expOfReal = Math.exp(realExpPart);\n        const c = expOfReal * Math.cos(imagExpPart);\n        const d = expOfReal * Math.sin(imagExpPart);\n    \n        return new PyComplexNumber(c, d);\n    }\n    \n    public toString(): string {\n        if (this.real === 0) {\n            return `${this.imag}j`;\n        }\n        // if (this.imag === 0) {\n        //     return `${this.real}`;\n        // }\n        \n        const sign = (this.imag >= 0) ? \"+\" : \"\";\n\n        // return `(${this.real}${sign}${this.imag}j)`;\n        return `(${this.toPythonComplexFloat(this.real)}${sign}${this.toPythonComplexFloat(this.imag)}j)`;\n    }\n\n    /*\n    * This function converts the real and imaginary parts of a complex number into strings.\n    * In Python, float values (used for the real and imaginary parts) are formatted using scientific\n    * notation when their absolute value is less than 1e-4 or at least 1e16. TypeScript's default\n    * formatting thresholds differ, so here we explicitly enforce Python's behavior.\n    *\n    * The chosen bounds (1e-4 and 1e16) are derived from Python's internal formatting logic \n    * (refer to the `format_float_short` function in CPython's pystrtod.c \n    * (https://github.com/python/cpython/blob/main/Python/pystrtod.c)). This ensures that the\n    * output of py-slang more closely matches that of native Python.\n    */\n    private toPythonComplexFloat(num: number){\n        if (num === Infinity) {\n            return \"inf\";\n        }\n        if (num === -Infinity) {\n            return \"-inf\";\n        }\n        \n        // Force scientific notation for values < 1e-4 or ≥ 1e16 to mimic Python's float formatting behavior.\n        if (Math.abs(num) >= 1e16 || (num !== 0 && Math.abs(num) < 1e-4)) {\n            return num.toExponential().replace(/e([+-])(\\d)$/, 'e$10$2');\n        }\n        return num.toString();\n    }\n\n    public equals(other: PyComplexNumber): boolean {\n        return (Number(this.real) === Number(other.real) && Number(this.imag) === Number(other.imag));\n    }\n}\n\nexport interface None{\n    type: 'NoneType';\n    loc?: SourceLocation | null;\n}\n\nexport interface ComplexLiteral{\n    type: 'Literal';\n    complex?: PyComplexNumber;\n    loc?: SourceLocation | null;\n}\n\n\n/**\n * Helper type to recursively make properties that are also objects\n * partial\n *\n * By default, `Partial<Array<T>>` is equivalent to `Array<T | undefined>`. For this type, `Array<T>` will be\n * transformed to Array<Partial<T>> instead\n */\nexport type RecursivePartial<T> =\n  T extends Array<any>\n    ? Array<RecursivePartial<T[number]>>\n    : T extends Record<any, any>\n      ? Partial<{\n          [K in keyof T]: RecursivePartial<T[K]>\n        }>\n      : T\n\nexport type Result = Finished | Error | SuspendedCseEval // | Suspended\n\n// TODO: should allow debug\n// export interface Suspended {\n//     status: 'suspended'\n//     it: IterableIterator<Value>\n//     scheduler: Scheduler\n//     context: Context\n// }\n  \nexport interface SuspendedCseEval {\n    status: 'suspended-cse-eval'\n    context: Context | PyContext\n}\n\nexport interface Finished {\n    status: 'finished'\n    context: Context | PyContext\n    value: Value\n    representation: Representation // if the returned value needs a unique representation,\n    // (for example if the language used is not JS),\n    // the display of the result will use the representation\n    // field instead\n}\n\n// export class Representation {\n//     constructor(public representation: string) {}\n//     toString() {\n//         return this.representation\n//     }\n// }\n\nexport class Representation {\n    constructor(public representation: string) {}\n  \n    toString(): string {\n        // call str(value) in stdlib\n        // TODO: mapping\n        return this.representation;\n    }\n}\n\nexport interface NativeStorage {\n    builtins: Map<string, Value>\n    previousProgramsIdentifiers: Set<string>\n    operators: Map<string, (...operands: Value[]) => Value>\n    maxExecTime: number\n    //evaller: null | ((program: string) => Value)\n    /*\n    the first time evaller is used, it must be used directly like `eval(code)` to inherit\n    surrounding scope, so we cannot set evaller to `eval` directly. subsequent assignments to evaller will\n    close in the surrounding values, so no problem\n     */\n    loadedModules: Record<string, ModuleFunctions>\n    loadedModuleTypes: Record<string, Record<string, string>>\n    conductor: IRunnerPlugin;\n}\n","import { ErrorSeverity, ErrorType, SourceError, SourceLocation } from '../types'\nimport { Token } from '../tokenizer';\n\n// todo\n// just put on here temporarily\nexport const UNKNOWN_LOCATION: SourceLocation = {\n    start: {\n      line: -1,\n      column: -1\n    },\n    end: {\n      line: -1,\n      column: -1\n    }\n}\n\ninterface Locatable {\n  startToken: Token;\n  endToken: Token;\n}\n\nexport abstract class PyRuntimeSourceError implements SourceError {\n    public type: ErrorType = ErrorType.RUNTIME;\n    public severity: ErrorSeverity = ErrorSeverity.ERROR;\n    public location: SourceLocation;\n    public message = 'Unknown runtime error has occured';\n  \n    constructor(node?: Locatable) {\n      if (node) {\n        this.location = {\n          start: {\n            line: node.startToken.line,\n            column: node.startToken.col,\n          },\n          end: {\n            line: node.startToken.line,\n            column: node.startToken.col,\n          }\n        };\n      }else {\n      this.location = UNKNOWN_LOCATION;\n      }\n    }\n  \n    public explain() {\n      return ''\n    }\n  \n    public elaborate() {\n      return this.explain()\n    }\n}\n\n\n","// Token names mostly identical to CPython https://github.com/python/cpython/blob/main/Lib/token.py.\n// Main difference is that keywords are also a token type while in CPython they are generic name.\n// We could also resolve special names at AST parse time.\n// Also renamed some token names to make more sense.\nexport enum TokenType {\n    //// Source S1\n    ENDMARKER,\n    NAME,\n    NUMBER,\n    BIGINT,\n    STRING,\n    NEWLINE,\n    INDENT,\n    DEDENT,\n    LPAR,\n    RPAR,\n    COLON,\n    DOUBLECOLON,\n    COMMA,\n    PLUS,\n    MINUS,\n    BANG,\n    STAR,\n    SLASH,\n    VBAR,\n    AMPER,\n    LESS,\n    GREATER,\n    EQUAL,\n    PERCENT,\n    DOUBLEEQUAL,\n    NOTEQUAL,\n    LESSEQUAL,\n    GREATEREQUAL,\n    DOUBLESTAR,\n    COMPLEX,    \n    // Special identifiers\n    AND,\n    OR,\n    FOR,\n    WHILE,\n    NONE,\n    TRUE,\n    FALSE,\n    IS,\n    NOT,\n    ISNOT,\n    PASS,\n    DEF,\n    LAMBDA,\n    FROM,\n    DOUBLESLASH,\n    BREAK,\n    CONTINUE,\n    RETURN,\n    ASSERT,\n    IMPORT,\n    GLOBAL,\n    NONLOCAL,\n    IF,\n    ELSE,\n    ELIF,\n    IN,\n    NOTIN,\n\n    //// Source s3\n    RSQB,\n    LSQB,\n    ELLIPSIS,\n\n    //// Unusued - Found in normal Python\n    SEMI,\n    DOT,\n    LBRACE,\n    RBRACE,\n    TILDE,\n    CIRCUMFLEX,\n    LEFTSHIFT,\n    RIGHTSHIFT,\n    PLUSEQUAL,\n    MINEQUAL,\n    STAREQUAL,\n    SLASHEQUAL,\n    PERCENTEQUAL,\n    AMPEREQUAL,\n    VBAREQUAL,\n    CIRCUMFLEXEQUAL,\n    LEFTSHIFTEQUAL,\n    RIGHTSHIFTEQUAL,\n    DOUBLESTAREQUAL,\n    DOUBLESLASHEQUAL,\n    AT,\n    ATEQUAL,\n    RARROW,\n    COLONEQUAL,\n    OP,\n    AWAIT,\n    ASYNC,\n    TYPE_IGNORE,\n    TYPE_COMMENT,\n    YIELD,\n    WITH,\n    DEL,\n    TRY,\n    EXCEPT,\n    FINALLY,\n    RAISE,\n}","import { PyContext } from './cse-machine/py_context';\nimport { PyClosure } from './cse-machine/py_closure';\nimport { Value } from \"./cse-machine/stash\";\nimport { pyHandleRuntimeError } from \"./cse-machine/py_utils\";\nimport { UnsupportedOperandTypeError } from \"./errors/py_errors\";\n\nexport function toPythonFloat(num: number): string {\n    if (Object.is(num, -0)) {\n        return \"-0.0\";\n    }\n    if (num === 0) {\n        return \"0.0\";\n    }\n\n    if (num === Infinity) {\n        return \"inf\";\n    }\n    if (num === -Infinity) {\n        return \"-inf\";\n    }\n\n    if (Number.isNaN(num)) {\n        return \"nan\";\n    }\n\n    if (Math.abs(num) >= 1e16 || (num !== 0 && Math.abs(num) < 1e-4)) {\n        return num.toExponential().replace(/e([+-])(\\d)$/, 'e$10$2');\n    }\n    if (Number.isInteger(num)) {\n        return num.toFixed(1).toString();\n    }\n    return num.toString();\n}\n\nexport function toPythonString(obj: Value): string {\n    let ret: any;\n    if (!obj) {\n        return 'None';\n    }\n    if ((obj as Value).type === 'bigint' || (obj as Value).type === 'complex') {\n        ret = (obj as Value).value.toString();\n    } else if ((obj as Value).type === 'number') {\n        ret = toPythonFloat((obj as Value).value);\n    } else if ((obj as Value).type === 'bool') {\n        if ((obj as Value).value === true) {\n            return \"True\";\n        } else {\n            return \"False\";\n        }\n    } else if ((obj as Value).type === 'error') {\n        return (obj as Value).message;\n    } else if (obj instanceof PyClosure) {\n        if (obj.node) {\n            const funcName = (obj.node as any).name?.lexeme || '(anonymous)';\n            return `<function ${funcName}>`;\n        }\n    } else if ((obj as Value).value === undefined) {\n        ret = 'None';\n    } else {\n        ret = (obj as Value).value.toString();\n    }\n    return ret;\n}\n\nexport class BuiltInFunctions {\n    static print(context: PyContext, ...args: Value[]): Value {\n        const output = args.map(arg => toPythonString(arg)).join(' ');\n        context.output += output + '\\n';\n        return { type: 'undefined' }; \n    }\n\n    static _int(context: PyContext, ...args: Value[]): Value {\n        if (args.length === 0) {\n            return { type: 'bigint', value: BigInt(0) };\n        }\n    \n        const arg = args[0];\n        if (arg.type === 'number') {\n            const truncated = Math.trunc(arg.value);\n            return { type: 'bigint', value: BigInt(truncated) };\n        }\n        if (arg.type === 'bigint') {\n            return { type: 'bigint', value: arg.value };\n        }\n    \n        // TODO: Use proper TypeError class once node is passed to built-ins\n        return { type: 'error', message: `TypeError: int() argument must be a string, a bytes-like object or a real number, not '${arg.type}'` };\n    }\n}\n\n// Load only the functions we have implemented\nexport const builtIns = new Map<string, (...args: any[]) => any>();\nbuiltIns.set('print', BuiltInFunctions.print);\nbuiltIns.set('_int', BuiltInFunctions._int);","import { PyContext } from \"./py_context\";\nimport { Value } from \"./stash\";\nimport { PyNode } from \"./py_types\";\nimport { TokenType } from \"../tokens\";\nimport { PyRuntimeSourceError } from \"../errors/py_runtimeSourceError\";\nimport { currentEnvironment, PyEnvironment } from \"./py_environment\";\nimport { builtIns } from \"../py_stdlib\";\nimport { StmtNS, ExprNS } from \"../ast-types\";\nimport { UnboundLocalError, NameError } from \"../errors/py_errors\";\nimport { marshalToPy } from \"./marshal\";\n\n\nexport function pyHandleRuntimeError (context: PyContext, error: PyRuntimeSourceError) {\n  context.errors.push(error);\n  throw error;\n}\n\nexport function typeTranslator(type: string): string {\n  switch (type) {\n    case \"bigint\":\n      return \"int\";\n    case \"number\":\n      return \"float\";\n    case \"boolean\":\n      return \"bool\";\n    case \"bool\":\n      return \"bool\";\n    case \"string\":\n      return \"str\";\n    case \"complex\":\n      return \"complex\";\n    case \"undefined\":\n      return \"NoneType\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// TODO: properly adapt for the rest, string is passed in to cater for __py_adder etc...\nexport function operatorTranslator(operator: TokenType | string) {\n  switch (operator) {\n    case TokenType.PLUS:\n      return '+';\n    case TokenType.MINUS:\n      return '-';\n    case TokenType.STAR:\n      return '*';\n    case TokenType.SLASH:\n      return '/';\n    case TokenType.DOUBLESLASH:\n      return '//';\n    case TokenType.PERCENT:\n      return '%';\n    case TokenType.DOUBLESTAR:\n      return '**';  \n    case TokenType.LESS:\n      return '<';\n    case TokenType.GREATER:\n      return '>';\n    case TokenType.DOUBLEEQUAL:\n      return '==';\n    case TokenType.NOTEQUAL:\n      return '!='\n    case TokenType.LESSEQUAL:\n      return '<=';\n    case TokenType.GREATEREQUAL:\n      return '>=';\n    case TokenType.NOT:\n      return 'not';\n    case TokenType.AND:\n      return 'and';\n    case TokenType.OR:\n      return 'or';\n    default:\n        return String(operator);\n  }\n}\n\nexport function pythonMod(a: number | bigint, b: number | bigint): number | bigint {\n  if (typeof a === 'bigint' || typeof b === 'bigint') {\n    const big_a = BigInt(a);\n    const big_b = BigInt(b);\n    const mod = big_a % big_b;\n\n    if ((mod < 0n && big_b > 0n) || (mod > 0n && big_b < 0n)) {\n      return mod + big_b;\n    } else {\n      return mod;\n    }\n  }\n  // both are numbers\n  const mod = a % b;\n  if ((mod < 0 && b > 0) || (mod > 0 && b < 0)) {\n    return mod + b;\n  } else {\n    return mod;\n  }\n}\n\nexport function pyDefineVariable(\n  context: PyContext,\n  name: string,\n  value: Value,\n  env: PyEnvironment = currentEnvironment(context)\n) {\n  const marshalledValue = marshalToPy(value, context);\n  Object.defineProperty(env.head, name, {\n      value: marshalledValue,\n      writable: true,\n      enumerable: true\n  });\n}\n\nexport function pyGetVariable(code: string, context: PyContext, name: string, node: PyNode): Value {\n    const env = currentEnvironment(context);\n    if (env.closure && env.closure.localVariables.has(name)) {\n        if (!env.head.hasOwnProperty(name)) {\n            throw new UnboundLocalError(code, name, node as ExprNS.Variable);\n        }\n    }\n\n    let currentEnv: PyEnvironment | null = env;\n    while (currentEnv) {\n        if (Object.prototype.hasOwnProperty.call(currentEnv.head, name)) {\n            return currentEnv.head[name];\n        } else {\n            currentEnv = currentEnv.tail;\n        }\n    }\n    if (builtIns.has(name)) {\n        return builtIns.get(name)!;\n    }\n    throw new NameError(code, name, node as ExprNS.Variable);\n}\n\nexport function scanForAssignments(node: PyNode | PyNode[]): Set<string> {\n    const assignments = new Set<string>();\n    const visitor = (curNode: PyNode) => {\n        if (!curNode || typeof curNode !== 'object') {\n          return;\n        }\n\n        const nodeType = curNode.constructor.name;\n\n        if (nodeType === 'Assign') {\n            assignments.add((curNode as StmtNS.Assign).name.lexeme);\n        } else if (nodeType === 'FunctionDef' || nodeType === 'Lambda') {\n            // detach here, nested functions have their own scope\n            return;\n        }\n\n        // Recurse through all other properties of the node\n        for (const key in curNode) {\n            if (Object.prototype.hasOwnProperty.call(curNode, key)) {\n                const child = (curNode as any)[key];\n                if (Array.isArray(child)) {\n                    child.forEach(visitor);\n                } else if (child && typeof child === 'object' && child.hasOwnProperty('type')) {\n                        visitor(child);\n                }\n            }\n        }\n    };\n\n    if (Array.isArray(node)) {\n        node.forEach(visitor);\n    } else {\n        visitor(node);\n    }\n\n    return assignments;\n}","import { ExprNS } from '../ast-types';\nimport { ErrorType, SourceError, SourceLocation} from '../types'\nimport { PyRuntimeSourceError } from './py_runtimeSourceError';\nimport { PyContext } from '../cse-machine/py_context';\nimport { column } from 'mathjs';\nimport { typeTranslator, operatorTranslator } from '../cse-machine/py_utils';\n\n/* Searches backwards and forwards till it hits a newline */\nfunction getFullLine(source: string, current: number): { line: number; fullLine: string } {\n  let back: number = current;\n  let forward: number = current;\n\n  while (back > 0 && source[back] != '\\n') {\n      back--;\n  }\n  if (source[back] === '\\n') {\n      back++;\n  }\n  while (forward < source.length && source[forward] != '\\n') {\n      forward++;\n  }\n\n  const line = source.slice(0, back).split('\\n').length;\n  const fullLine = source.slice(back, forward);\n\n  return {line, fullLine};\n}\n\nexport function createErrorIndicator(snippet: string, errorPos: number): string {\n  let indicator = \"\";\n  for (let i = 0; i < snippet.length; i++) {\n    indicator += (i === errorPos ? \"^\" : \"~\");\n  }\n  return indicator;\n}\n\n// export class TypeConcatenateError extends PyRuntimeSourceError {\n//     constructor(source: string, node: ExprNS.Expr, wrongType: string) {\n//         super(node);\n//         this.type = ErrorType.TYPE;\n\n//         let index = (node as any).symbol?.loc?.start?.index;\n//         const { line, fullLine } = getFullLine(source, index);\n//         const snippet = (node as any).symbol?.loc?.source ?? '<unknown source>';\n        \n//         let hint = 'TypeError: can only concatenate str (not \"' + wrongType + '\") to str.';\n//         const offset = fullLine.indexOf(snippet);\n//         const indicator = createErrorIndicator(snippet, '+');\n//         const name = \"TypeError\";\n//         const suggestion = \"You are trying to concatenate a string with an \" + wrongType + \". To fix this, convert the \" + wrongType + \" to a string using str(), or ensure both operands are of the same type.\";\n//         const msg = name + \" at line \" + line + \"\\n\\n    \" + fullLine + \"\\n    \" + \" \".repeat(offset) + indicator + \"\\n\" + hint + \"\\n\" + suggestion;\n//         this.message = msg;\n//     }\n// }\n\nexport class UnsupportedOperandTypeError extends PyRuntimeSourceError {\n    constructor(source: string, node: ExprNS.Expr, wrongType1: string, wrongType2: string, operand: string) {\n        super(node); \n        this.type = ErrorType.TYPE;\n    \n        const operatorStr = operatorTranslator(operand);\n        const typeStr1 = typeTranslator(wrongType1);\n        \n        const { line, fullLine } = getFullLine(source, node.startToken.indexInSource);    \n\n        const snippet = source.substring(node.startToken.indexInSource, node.endToken.indexInSource + node.endToken.lexeme.length);\n\n        const offset = fullLine.indexOf(snippet);\n        const adjustedOffset = offset >= 0 ? offset : 0;\n\n        const errorPos = (node as any).operator.indexInSource - node.startToken.indexInSource;\n        const indicator = createErrorIndicator(snippet, errorPos);\n      \n        let hint: string;\n        let suggestion: string;\n      \n        if (wrongType2 === '') {\n            // Format for Unary operators\n            hint = `TypeError: bad operand type for unary ${operatorStr}: '${typeStr1}'`;\n            suggestion = `You are using the unary '${operatorStr}' operator on '${typeStr1}', which is not a supported type for this operation.\\nMake sure the operator is of the correct type.\\n`;\n        } else {\n            // Format for Binary operators\n            const typeStr2 = typeTranslator(wrongType2);\n            hint = `TypeError: unsupported operand type(s) for ${operatorStr}: '${typeStr1}' and '${typeStr2}'`;\n            suggestion = `You are using the '${operatorStr}' operator between '${typeStr1}' and '${typeStr2}', which are not compatible types for this operation.\\nMake sure both operands are of the correct type.\\n`;\n        }\n      \n        // Assemble the final multi-line message\n        this.message = `TypeError at line ${line}\\n\\n    ${fullLine}\\n    ${' '.repeat(adjustedOffset)}${indicator}\\n${hint}\\n${suggestion}`;\n    }\n}\n\nexport class MissingRequiredPositionalError extends PyRuntimeSourceError {\n    private functionName: string;\n    private missingParamCnt: number;\n    private missingParamName: string;\n  \n    constructor(source: string, node: ExprNS.Expr, functionName: string, params: any, args: any, variadic: boolean) {\n        super(node);\n        this.type = ErrorType.TYPE;\n        this.functionName = functionName;\n        let adverb: string = \"exactly\";\n        if (variadic) {\n          adverb = \"at least\";\n        }\n        const index = (node as any).loc?.start?.index\n                  ?? (node as any).srcNode?.loc?.start?.index\n                  ?? 0;\n        const { line, fullLine } = getFullLine(source, index);\n        this.message = 'TypeError at line ' + line + '\\n\\n    ' + fullLine + '\\n';\n\n        if (typeof params === 'number') {\n          this.missingParamCnt = params;\n          this.missingParamName = '';\n          const givenParamCnt = args.length;\n          if (this.missingParamCnt === 1 || this.missingParamCnt === 0) {}\n          const msg = `TypeError: ${this.functionName}() takes ${adverb} ${this.missingParamCnt} argument (${givenParamCnt} given)\nCheck the function definition of '${this.functionName}' and make sure to provide all required positional arguments in the correct order.`;\n          this.message += msg;\n        } else {\n          this.missingParamCnt = params.length - args.length;\n          const missingNames: string[] = [];\n          for (let i = args.length; i < params.length; i++) {\n            const param = params[i].name;\n            missingNames.push(\"\\'\"+param+\"\\'\");\n          }\n          this.missingParamName = this.joinWithCommasAndAnd(missingNames);\n          const msg = `TypeError: ${this.functionName}() missing ${this.missingParamCnt} required positional argument(s): ${this.missingParamName}\nYou called ${this.functionName}() without providing the required positional argument ${this.missingParamName}. Make sure to pass all required arguments when calling ${this.functionName}.`;\n          this.message += msg;\n        }\n    }\n\n    private joinWithCommasAndAnd(names: string[]): string {\n        if (names.length === 0) {\n          return '';\n        } else if (names.length === 1) {\n          return names[0];\n        } else if (names.length === 2) {\n          return `${names[0]} and ${names[1]}`;\n        } else {\n          const last = names.pop();\n          return `${names.join(', ')} and ${last}`;\n        }\n    }\n}\n\nexport class TooManyPositionalArgumentsError extends PyRuntimeSourceError {\n    private functionName: string;\n    private expectedCount: number;\n    private givenCount: number;\n  \n    constructor(source: string, node: ExprNS.Expr, functionName: string, params: any, args: any, variadic: boolean) {\n      super(node);\n      this.type = ErrorType.TYPE;\n      this.functionName = functionName;\n      let adverb: string = \"exactly\";\n      if (variadic) {\n        adverb = \"at most\";\n      }\n\n      const index = (node as any).loc?.start?.index\n                  ?? (node as any).srcNode?.loc?.start?.index\n                  ?? 0;\n      const { line, fullLine } = getFullLine(source, index);\n      this.message = 'TypeError at line ' + line + '\\n\\n    ' + fullLine + '\\n';\n\n      if (typeof params === 'number') {\n        this.expectedCount = params;\n        this.givenCount = args.length;\n        if (this.expectedCount === 1 || this.expectedCount === 0) {\n          this.message += `TypeError: ${this.functionName}() takes ${adverb} ${this.expectedCount} argument (${this.givenCount} given)`;\n        } else {\n          this.message += `TypeError: ${this.functionName}() takes ${adverb} ${this.expectedCount} arguments (${this.givenCount} given)`;\n        }\n      } else {\n        this.expectedCount = params.length;\n        this.givenCount = args.length;\n        if (this.expectedCount === 1 || this.expectedCount === 0) {\n          this.message += `TypeError: ${this.functionName}() takes ${this.expectedCount} positional argument but ${this.givenCount} were given`;\n        } else {\n          this.message += `TypeError: ${this.functionName}() takes ${this.expectedCount} positional arguments but ${this.givenCount} were given`;\n        }\n      }\n\n      this.message += `\\nRemove the extra argument(s) when calling '${this.functionName}', or check if the function definition accepts more arguments.`;\n    }\n}\n\nexport class ZeroDivisionError extends PyRuntimeSourceError {\n  constructor(source: string, node: ExprNS.Expr, context: PyContext) {\n    super(node);\n    this.type = ErrorType.TYPE;\n    \n    const { line, fullLine } = getFullLine(source, node.startToken.indexInSource);\n\n    const snippet = source.substring(node.startToken.indexInSource, node.endToken.indexInSource + node.endToken.lexeme.length);\n    const offset = fullLine.indexOf(snippet);\n    const adjustedOffset = offset >= 0 ? offset : 0;\n\n    const errorPos = (node as any).operator.indexInSource - node.startToken.indexInSource;\n    const indicator = createErrorIndicator(snippet, errorPos);\n    const name = \"ZeroDivisionError\";\n    const operator = (node as any).operator.lexeme;\n    let hint: string;\n\n    switch (operator) {\n        case '/':\n            hint = 'ZeroDivisionError: division by zero.';\n            break;\n        case '//':\n            hint = 'ZeroDivisionError: integer division or modulo by zero.';\n            break;\n        case '%':\n            hint = 'ZeroDivisionError: integer modulo by zero.';\n            break;\n        case '**':\n            hint = 'ZeroDivisionError: 0.0 cannot be raised to a negative power.';\n            break;\n        default:\n            hint = 'ZeroDivisionError: division by zero.';\n    }\n    const suggestion = \"You attempted to divide by zero. Division or modulo operations cannot be performed with a divisor of zero. Please ensure that the divisor is non-zero before performing the operation.\";\n    const msg = `${name} at line ${line}\\n\\n     ${fullLine}\\n     ${' '.repeat(adjustedOffset)}${indicator}\\n${hint}\\n${suggestion}`;\n    this.message = msg;\n  }\n}\n\nexport class UnboundLocalError extends PyRuntimeSourceError {\n  constructor(source: string, name: string, node: ExprNS.Expr) {\n    super(node);\n    this.type = ErrorType.TYPE;\n\n    const { line, fullLine } = getFullLine(source, node.startToken.indexInSource);\n    const snippet = source.substring(node.startToken.indexInSource, node.endToken.indexInSource + node.endToken.lexeme.length);\n    const offset = fullLine.indexOf(snippet);\n    const adjustedOffset = offset >= 0 ? offset : 0;\n\n    const errorPos = 0;\n    const indicator = createErrorIndicator(snippet, errorPos);\n\n    const hint = `UnboundLocalError: cannot access local variable '${name}' where it is not associated with a value`\n    const suggestion = `The variable '${name}' is used in the current function, so it's considered a local variable. However, you tried to access it before a value was assigned to it in the local scope. Assign a value to '${name}' before you use it.`;\n    const msg = `UnboundLocalError at line ${line}\\n\\n    ${fullLine}\\n    ${' '.repeat(adjustedOffset)}${indicator}\\n${hint}\\n${suggestion}`\n    this.message = msg;\n  }\n}\n\nexport class NameError extends PyRuntimeSourceError {\n  constructor(source: string, name: string, node: ExprNS.Variable) {\n    super(node);\n    this.type = ErrorType.TYPE;\n\n    const { line, fullLine } = getFullLine(source, node.startToken.indexInSource);\n\n    const snippet = source.substring(node.startToken.indexInSource, node.endToken.indexInSource + node.endToken.lexeme.length);\n\n    const offset = fullLine.indexOf(snippet);\n    const adjustedOffset = offset >= 0 ? offset : 0;\n\n    const errorPos = 0;\n    const indicator = createErrorIndicator(snippet, errorPos);\n    \n    const hint = `NameError: name '${name}' is not defined`;\n    const suggestion = `The name '${name}' is not defined in the current scope. Check for typos or make sure the variable is assigned a value before being used.`;\n\n    this.message = `NameError at line ${line}\\n\\n    ${fullLine}\\n    ${' '.repeat(adjustedOffset)}${indicator}\\n${hint}\\n${suggestion}`;\n  }\n}\n\n// export class StepLimitExceededError extends PyRuntimeSourceError {\n//   constructor(source: string, node: ExprNS.Expr, context: PyContext) {\n//     super(node);\n//     this.type = ErrorType.RUNTIME;\n\n//     const index = (node as any).loc?.start?.index\n//                   ?? (node as any).srcNode?.loc?.start?.index\n//                   ?? 0;\n\n//     const { line, fullLine } = getFullLine(source, index);\n\n//     const snippet = (node as any).loc?.source\n//                   ?? (node as any).srcNode?.loc?.source\n//                   ?? '<unknown source>';\n\n//     const indicator = createErrorIndicator(fullLine, '@');  // no target symbol\n\n//     const name = 'StepLimitExceededError';\n//     const hint = 'The evaluation has exceeded the maximum step limit.';\n\n//     const offset = fullLine.indexOf(fullLine);\n//     const adjustedOffset = offset >= 0 ? offset : 0;\n\n//     const msg = [\n//       `${name} at line ${line}`,\n//       '',\n//       '    ' + fullLine,\n//       '    ' + ' '.repeat(adjustedOffset) + indicator,\n//       hint\n//     ].join('\\n');\n\n//     this.message = msg;\n//   }\n// }\n\n// export class ValueError extends PyRuntimeSourceError {\n//   constructor(source: string, node: ExprNS.Expr, context: PyContext, functionName: string) {\n//     super(node);\n//     this.type = ErrorType.TYPE;\n//     const index = (node as any).loc?.start?.index\n//                   ?? (node as any).srcNode?.loc?.start?.index\n//                   ?? 0;\n//     const { line, fullLine } = getFullLine(source, index);\n//     const snippet = (node as any).loc?.source\n//                   ?? (node as any).srcNode?.loc?.source\n//                   ?? '<unknown source>';\n//     let hint = 'ValueError: math domain error. ';\n//     const offset = fullLine.indexOf(snippet);\n//     const indicator = createErrorIndicator(snippet, '@');\n//     const name = \"ValueError\";\n//     const suggestion = `Ensure that the input value(s) passed to '${functionName}' satisfy the mathematical requirements`;\n//     const msg = name + \" at line \" + line + \"\\n\\n    \" + fullLine + \"\\n    \" + \" \".repeat(offset) + indicator + \"\\n\" + hint + suggestion;\n//     this.message = msg;\n//   }\n// }\n\n// export class TypeError extends PyRuntimeSourceError {\n//   constructor(source: string, node: ExprNS.Expr, context: PyContext, originalType: string, targetType: string) {\n//     super(node);\n//     originalType = typeTranslator(originalType);\n//     this.type = ErrorType.TYPE;\n//     const index = (node as any).loc?.start?.index\n//                   ?? (node as any).srcNode?.loc?.start?.index\n//                   ?? 0;\n//     const { line, fullLine } = getFullLine(source, index);\n//     const snippet = (node as any).loc?.source\n//                   ?? (node as any).srcNode?.loc?.source\n//                   ?? '<unknown source>';\n//     let hint = \"TypeError: '\" + originalType + \"' cannot be interpreted as an '\" + targetType + \"'.\";\n//     const offset = fullLine.indexOf(snippet);\n//     const adjustedOffset = offset >= 0 ? offset : 0;\n//     const indicator = createErrorIndicator(snippet, '@');\n//     const name = \"TypeError\";\n//     const suggestion = ' Make sure the value you are passing is compatible with the expected type.';\n//     const msg = name + \" at line \" + line + \"\\n\\n    \" + fullLine + \"\\n    \" + \" \".repeat(adjustedOffset) + indicator + \"\\n\" + hint + suggestion;\n//     this.message = msg;\n//   }\n// }\n\n// export class SublanguageError extends PyRuntimeSourceError {\n//   constructor (\n//   source: string,\n//   node: ExprNS.Expr,\n//   context: PyContext,\n//   functionName: string,\n//   chapter: string,\n//   details?: string\n// ) {\n//     super(node)\n    \n//     this.type = ErrorType.TYPE\n    \n//     const index = (node as any).loc?.start?.index\n//                 ?? (node as any).srcNode?.loc?.start?.index\n//                 ?? 0\n//     const { line, fullLine } = getFullLine(source, index)\n//     const snippet = (node as any).loc?.source\n//                   ?? (node as any).srcNode?.loc?.source\n//                   ?? '<unknown source>'\n//     const offset = fullLine.indexOf(snippet)\n//     const indicator = createErrorIndicator(snippet, '@')\n    \n//     const name = 'SublanguageError'\n//     const hint = 'Feature not supported in Python §' + chapter + '. '\n//     const suggestion = `The call to '${functionName}()' relies on behaviour that is valid in full Python but outside the Python §1 sublanguage${details ? ': ' + details : ''}.`\n    \n//     this.message = `${name} at line ${line}\\n\\n ${fullLine}\\n ${' '.repeat(offset)}${indicator}\\n${hint}${suggestion}`\n//   }\n// }\n","import { Value } from \"./stash\";\nimport { PyContext } from \"./py_context\";\nimport { PyComplexNumber} from \"../types\";\nimport { UnsupportedOperandTypeError, ZeroDivisionError } from \"../errors/py_errors\";\nimport { ExprNS } from \"../ast-types\";\nimport { TokenType } from \"../tokens\";\nimport { pyHandleRuntimeError, operatorTranslator, pythonMod, typeTranslator } from \"./py_utils\";\nimport { Token } from \"../tokenizer\";\nimport { operandTranslator } from \"./utils\";\n\nexport type BinaryOperator =\n    | \"==\"\n    | \"!=\"\n    | \"===\"\n    | \"!==\"\n    | \"<\"\n    | \"<=\"\n    | \">\"\n    | \">=\"\n    | \"<<\"\n    | \">>\"\n    | \">>>\"\n    | \"+\"\n    | \"-\"\n    | \"*\"\n    | \"/\"\n    | \"%\"\n    | \"**\"\n    | \"|\"\n    | \"^\"\n    | \"&\"\n    | \"in\"\n    | \"instanceof\";\n\n// Helper function for truthiness based on Python rules\nexport function isFalsy(value: Value): boolean {\n    switch (value.type) {\n        case 'bigint':\n            return value.value === 0n;\n        case 'number':\n            return value.value === 0;\n        case 'bool':\n            return !value.value;\n        case 'string':\n            return value.value === '';\n        case 'complex':\n            return value.value.real === 0 && value.value.imag == 0;\n        case 'undefined': // Represents None\n            return true;\n        default:\n            // All other objects are considered truthy\n            return false;\n    }\n}\n\nexport function evaluateBoolExpression(code: string, command: ExprNS.Expr, context: PyContext, operator: TokenType, left: Value, right: Value): Value {\n    if (operator === TokenType.OR) {\n        // Python 'or': if the first value is truthy, return it. Otherwise, evaluate and return the second value.\n        return !isFalsy(left) ? left : right;\n    } else if (operator === TokenType.AND) {\n        // Python 'and': if the first value is falsy, return it. Otherwise, evaluate and return the second value.\n        return isFalsy(left) ? left : right;\n    } else {\n        pyHandleRuntimeError(context, new UnsupportedOperandTypeError(\n            code, command, typeTranslator(left.type), typeTranslator(right.type), operatorTranslator(operator)\n        ));\n        return { type: 'error', message: `Unreachable in evaluateBoolExpression}` };\n    }\n}\n\nexport function evaluateUnaryExpression(code: string, command: ExprNS.Expr, context: PyContext, operator: TokenType, value: Value): Value {\n    switch (operator) {\n        case TokenType.NOT:\n            return { type: 'bool', value: isFalsy(value) };\n\n        case TokenType.MINUS:\n            switch (value.type) {\n                case 'number':\n                    return { type: 'number', value: -value.value };\n                case 'bigint':\n                    return { type: 'bigint', value: -value.value };\n                case 'bool':\n                    return { type: 'bigint', value: value.value ? -1n : 0n };\n                case 'complex':\n                    return {\n                        type: 'complex',\n                        value: new PyComplexNumber(-value.value.real, -value.value.imag)\n                    }\n                default:\n                    pyHandleRuntimeError(context, new UnsupportedOperandTypeError(\n                        code, command, value.type, \"\", operatorTranslator(operator)\n                    ));\n                    return { type: 'error', message: 'Unreachable in evaluateUnaryExpression - MINUS' };\n            }\n\n        case TokenType.PLUS:\n             switch (value.type) {\n                case 'number':\n                case 'bigint':\n                case 'complex':\n                    return value;\n                case 'bool':\n                    return { type: 'bigint', value: value.value ? 1n : 0n };\n                default:\n                    pyHandleRuntimeError(context, new UnsupportedOperandTypeError(\n                        code, \n                        command, \n                        value.type, \n                        \"\", \n                        operatorTranslator(operator)\n                    ));\n                    return { type: 'error', message: 'Unreachable in evaluateUnaryExpression - PLUS' };\n            }\n    }\n    return { type: 'error', message: 'Unreachable in evaluateUnaryExpression' };\n}\n\n// Remove __py_{operators} translation stage and switch case for readability\n// TODO: do we need to string repetition like 'a' * 10?\nexport function evaluateBinaryExpression(code: string, command: ExprNS.Expr, context: PyContext, operator: TokenType, left: Value, right: Value): Value {\n\n    // Handle Complex numbers\n    if (left.type === 'complex' || right.type === 'complex') {\n        if (right.type !== 'complex' && right.type !== 'number' && right.type !== 'bigint' && right.type !== 'bool') {\n            pyHandleRuntimeError(context, new UnsupportedOperandTypeError(\n                    code, \n                    command, \n                    left.type, \n                    right.type, \n                    operatorTranslator(operator)));\n            return { type: 'error', message: 'Unreachable in evaluateBinaryExpression - complex | complex (start)' };\n        }\n        const leftComplex = PyComplexNumber.fromValue(left.value);\n        const rightComplex = PyComplexNumber.fromValue(right.value);\n        let result: PyComplexNumber;\n\n        switch (operator) {\n            case TokenType.PLUS: result = leftComplex.add(rightComplex); break;\n            case TokenType.MINUS: result = leftComplex.sub(rightComplex); break;\n            case TokenType.STAR: result = leftComplex.mul(rightComplex); break;\n            case TokenType.SLASH: result = leftComplex.div(rightComplex); break;\n            case TokenType.DOUBLESTAR: result = leftComplex.pow(rightComplex); break;\n            case TokenType.DOUBLEEQUAL: return { type: 'bool', value: leftComplex.equals(rightComplex) };\n            case TokenType.NOTEQUAL: return { type: 'bool', value: !leftComplex.equals(rightComplex) };\n            default:\n                pyHandleRuntimeError(context, new UnsupportedOperandTypeError(\n                    code, \n                    command, \n                    left.type, \n                    right.type, \n                    operatorTranslator(operator))); \n                return { type: 'error', message: 'Unreachable in evaluateBinaryExpression - complex | complex (end)' };\n        }\n        return { type: 'complex', value: result };\n    }\n\n    // Handle comparisons with None (represented as 'undefined' type)\n    if (left.type === 'undefined' || right.type === 'undefined') {\n        switch (operator) {\n            case TokenType.DOUBLEEQUAL:\n                // True only if both are None\n                return { type: 'bool', value: left.type === right.type }; \n            case TokenType.NOTEQUAL:\n                return { type: 'bool', value: left.type !== right.type };\n            default:\n                pyHandleRuntimeError(context, new UnsupportedOperandTypeError(\n                    code, \n                    command, \n                    left.type, \n                    right.type, \n                    operatorTranslator(operator)));\n                return { type: 'error', message: 'Unreachable in evaluateBinaryExpression - undefined | undefined' };\n        }\n    }\n    \n    // Handle string operations\n    if (left.type === 'string' || right.type === 'string') {\n        if (operator === TokenType.PLUS) {\n            if (left.type === 'string' && right.type === 'string') {\n                return { type: 'string', value: left.value + right.value };\n            } else {\n                pyHandleRuntimeError(context, new UnsupportedOperandTypeError(\n                    code,\n                    command,\n                    left.type,\n                    right.type,\n                    operatorTranslator(operator)\n                ));\n            }\n        }\n        if (left.type === 'string' && right.type === 'string') {\n            switch (operator) {\n                case TokenType.DOUBLEEQUAL:\n                    return { type: 'bool', value: left.value === right.value };\n                case TokenType.NOTEQUAL:\n                    return { type: 'bool', value: left.value !== right.value };\n                case TokenType.LESS:\n                    return { type: 'bool', value: left.value < right.value };\n                case TokenType.LESSEQUAL:\n                    return { type: 'bool', value: left.value <= right.value };\n                case TokenType.GREATER:\n                    return { type: 'bool', value: left.value > right.value };\n                case TokenType.GREATEREQUAL:\n                    return { type: 'bool', value: left.value >= right.value };\n            }\n        }\n        // TypeError: Reached if one is a string and the other is not\n        pyHandleRuntimeError(context, new UnsupportedOperandTypeError(\n            code, \n            command, \n            left.type, \n            right.type, \n            operatorTranslator(operator)));\n        return { type: 'error', message: 'Unreachable in evaluateBinaryExpression - string | string' };\n    }\n\n    /**\n     * Coerce boolean to a numeric value for all other arithmetic\n     * Support for True - 1 or False + 1\n     */\n    const leftNum = left.type === 'bool' ? (left.value ? 1 : 0) : left.value;\n    const rightNum = right.type === 'bool' ? (right.value ? 1 : 0) : right.value;\n    const leftType = left.type === 'bool' ? 'number' : left.type;\n    const rightType = right.type === 'bool' ? 'number' : right.type;\n\n    // Numeric Operations (number or bigint)\n    switch (operator) {\n        case TokenType.PLUS:\n        case TokenType.MINUS:\n        case TokenType.STAR:\n        case TokenType.SLASH:\n        case TokenType.DOUBLESLASH:\n        case TokenType.PERCENT:\n        case TokenType.DOUBLESTAR:\n            if (leftType === 'number' || rightType === 'number') {\n                const l = Number(leftNum);\n                const r = Number(rightNum);\n                switch (operator) {\n                    case TokenType.PLUS: \n                        return { type: 'number', value: l + r };\n                    case TokenType.MINUS: \n                        return { type: 'number', value: l - r };\n                    case TokenType.STAR: \n                        return { type: 'number', value: l * r };\n                    case TokenType.SLASH: \n                        if (r === 0) {\n                            pyHandleRuntimeError(context, new ZeroDivisionError(code, command, context));\n                        }\n                        return { type: 'number', value: l / r };\n                    case TokenType.DOUBLESLASH:\n                        if (r === 0) { \n                            pyHandleRuntimeError(context, new ZeroDivisionError(code, command, context));\n                        }\n                        return { type: 'number', value: Math.floor(l / r) };\n                    case TokenType.PERCENT:\n                         if (r === 0) {\n                            pyHandleRuntimeError(context, new ZeroDivisionError(code, command, context));\n                         }\n                        return { type: 'number', value: pythonMod(l, r) };\n                    case TokenType.DOUBLESTAR: \n                         if (l === 0 && r < 0) {\n                            pyHandleRuntimeError(context, new ZeroDivisionError(code, command, context));\n                         }\n                    return { type: 'number', value: l ** r };\n                }\n            }\n            if (leftType === 'bigint' && rightType === 'bigint') {\n                const l = leftNum as bigint;\n                const r = rightNum as bigint;\n                 switch (operator) {\n                    case TokenType.PLUS: return { type: 'bigint', value: l + r };\n                    case TokenType.MINUS: return { type: 'bigint', value: l - r };\n                    case TokenType.STAR: return { type: 'bigint', value: l * r };\n                    case TokenType.SLASH:\n                        if (r === 0n) {\n                            pyHandleRuntimeError(context, new ZeroDivisionError(code, command, context));\n                        }\n                        return { type: 'number', value: Number(l) / Number(r) };\n                    case TokenType.DOUBLESLASH:\n                        if (r === 0n) {\n                            pyHandleRuntimeError(context, new ZeroDivisionError(code, command, context));\n                        }\n                        return { type: 'bigint', value: (l - (pythonMod(l, r) as bigint)) / r };\n                    case TokenType.PERCENT:\n                        if (r === 0n) {\n                            pyHandleRuntimeError(context, new ZeroDivisionError(code, command, context));\n                        }\n                        return { type: 'bigint', value: pythonMod(l, r) };\n                    case TokenType.DOUBLESTAR: \n                        if (l === 0n && r < 0n) {\n                            pyHandleRuntimeError(context, new ZeroDivisionError(code, command, context));\n                        }\n                        if (r < 0n) return { type: 'number', value: Number(l) ** Number(r)}\n                        return { type: 'bigint', value: l ** r };\n                }\n            }\n            break;\n\n        // Comparison Operators\n        case TokenType.DOUBLEEQUAL:\n        case TokenType.NOTEQUAL:\n        case TokenType.LESS:\n        case TokenType.LESSEQUAL:\n        case TokenType.GREATER:\n        case TokenType.GREATEREQUAL: {\n            const cmp = pyCompare(left, right);\n            let result: boolean;\n            switch (operator) {\n                case TokenType.DOUBLEEQUAL: result = cmp === 0; break;\n                case TokenType.NOTEQUAL:    result = cmp !== 0; break;\n                case TokenType.LESS:        result = cmp < 0;  break;\n                case TokenType.LESSEQUAL:   result = cmp <= 0; break;\n                case TokenType.GREATER:     result = cmp > 0;  break;\n                case TokenType.GREATEREQUAL:result = cmp >= 0; break;\n                default: return { type: 'error', message: 'Unreachable in evaluateBinaryExpression - comparison' };\n            }\n            return { type: 'bool', value: result };\n        }\n    }\n    return { type: 'error', message: 'todo error' };\n}\n\n/**\n * TEMPORARY IMPLEMENTATION\n * This function is a simplified comparison between int and float\n * to mimic Python-like ordering semantics.\n *\n * TODO: In future, replace this with proper method dispatch to\n * __eq__, __lt__, __gt__, etc., according to Python's object model.\n *\n * pyCompare: Compares a Python-style big integer (int_num) with a float (float_num),\n * returning -1, 0, or 1 for less-than, equal, or greater-than.\n * \n * This logic follows CPython's approach in floatobject.c, ensuring Python-like semantics:\n * \n * 1. Special Values:\n *    - If float_num is inf, any finite int_num is smaller (returns -1).\n *    - If float_num is -inf, any finite int_num is larger (returns 1).\n * \n * 2. Compare by Sign:\n *    - Determine each number’s sign (negative, zero, or positive). If they differ, return based on sign.\n *    - If both are zero, treat them as equal.\n * \n * 3. Safe Conversion:\n *    - If |int_num| <= 2^53, safely convert it to a double and do a normal floating comparison.\n * \n * 4. Handling Large Integers:\n *    - For int_num beyond 2^53, approximate the magnitudes via exponent/bit length.\n *    - Compare the integer’s digit count with float_num’s order of magnitude.\n * \n * 5. Close Cases:\n *    - If both integer and float have the same digit count, convert float_num to a “big-int-like” string\n *      (approximateBigIntString) and compare lexicographically to int_num’s string.\n * \n * By layering sign checks, safe numeric range checks, and approximate comparisons,\n * we achieve a Python-like ordering of large integers vs floats.\n */\n\nfunction pyCompare(val1 : Value, val2 : Value): number {\n    // Handle same type comparisons first\n    if (val1.type === 'bigint' && val2.type === 'bigint') {\n        if (val1.value < val2.value) return -1;\n        if (val1.value > val2.value) return 1;\n        return 0;\n    }\n    if (val1.type === 'number' && val2.type === 'number') {\n        if (val1.value < val2.value) return -1;\n        if (val1.value > val2.value) return 1;\n        return 0;\n    }\n\n    // int_num.value < float_num.value => -1\n    // int_num.value = float_num.value => 0\n    // int_num.value > float_num.value => 1\n    let int_val: bigint;\n    let float_val: number;\n\n    if (val1.type === 'bigint' && val2.type === 'number') {\n        int_val = val1.value;\n        float_val = val2.value;\n    } else if (val1.type === 'number' && val2.type === 'bigint') {\n        int_val = val2.value;\n        float_val = val1.value;\n        // for swapped order, swap the result of comparison here\n        return -pyCompare(val2, val1);\n    } else {\n        return 0;\n    }\n\n    // If float_num is positive Infinity, then int_num is considered smaller.\n    if (float_val === Infinity) {\n        return -1;\n    }\n    if (float_val === -Infinity) {\n        return 1;\n    }\n\n    const signInt = (int_val < 0n) ? -1 : (int_val > 0n ? 1 : 0);\n    const signFlt = Math.sign(float_val);  // -1, 0, or 1\n\n    if (signInt < signFlt) return -1;  // e.g. int<0, float>=0 => int < float\n    if (signInt > signFlt) return 1;   // e.g. int>=0, float<0 => int > float\n    \n    // Both have the same sign (including 0).\n    // If both are zero, treat them as equal.\n    if (signInt === 0 && signFlt === 0) {\n        return 0;\n    }\n\n    // Both are either positive or negative.\n    // If |int_num.value| is within 2^53, it can be safely converted to a JS number for an exact comparison.\n    const absInt = int_val < 0n ? -int_val : int_val;\n    const MAX_SAFE = 9007199254740991; // 2^53 - 1\n\n    if (absInt <= MAX_SAFE) {\n        // Safe conversion to double.\n        const intAsNum = Number(int_val); \n        const diff = intAsNum - float_val;\n        if (diff === 0) return 0;\n        return diff < 0 ? -1 : 1;\n    }\n\n    // For large integers exceeding 2^53, need to distinguish more carefully.\n    // Determine the order of magnitude of float_num.value (via log10) and compare it with\n    // the number of digits of int_num.value. An approximate comparison can indicate whether\n    // int_num.value is greater or less than float_num.value.\n    \n    // First, check if float_num.value is nearly zero (but not zero).\n    if (float_val === 0) {\n        // Although signFlt would be 0 and handled above, just to be safe:\n        return signInt; \n    }\n\n    const absFlt = Math.abs(float_val);\n    // Determine the order of magnitude.\n    const exponent = Math.floor(Math.log10(absFlt)); \n\n    // Get the decimal string representation of the absolute integer.\n    const intStr = absInt.toString(); \n    const intDigits = intStr.length;\n\n    // If exponent + 1 is less than intDigits, then |int_num.value| has more digits\n    // and is larger (if positive) or smaller (if negative) than float_num.value.\n    // Conversely, if exponent + 1 is greater than intDigits, int_num.value has fewer digits.\n    const integerPartLen = exponent + 1;\n    if (integerPartLen < intDigits) {\n        // length of int_num.value is larger => all positive => int_num.value > float_num.value\n        //                => all negative => int_num.value < float_num.value\n        return (signInt > 0) ? 1 : -1;\n    } else if (integerPartLen > intDigits) {\n        // length of int_num.value is smaller => all positive => int_num.value < float_num.value\n        //                => all negative => int_num.value > float_num.value\n        return (signInt > 0) ? -1 : 1;\n    } else {\n        // If the number of digits is the same, they may be extremely close.\n        // Method: Convert float_num.value into an approximate BigInt string and perform a lexicographical comparison.\n        const floatApproxStr = approximateBigIntString(absFlt, 30);\n        \n        const aTrim = intStr.replace(/^0+/, '');\n        const bTrim = floatApproxStr.replace(/^0+/, '');\n\n        // If lengths differ after trimming, the one with more digits is larger.\n        if (aTrim.length > bTrim.length) {\n            return (signInt > 0) ? 1 : -1;\n        } else if (aTrim.length < bTrim.length) {\n            return (signInt > 0) ? -1 : 1;\n        } else {\n        // Same length: use lexicographical comparison.\n        const cmp = aTrim.localeCompare(bTrim);\n        if (cmp === 0) {\n            return 0;\n        }\n        // cmp>0 => aTrim > bTrim => aVal > bVal\n        return (cmp > 0) ? (signInt > 0 ? 1 : -1)\n                        : (signInt > 0 ? -1 : 1);\n        }\n    }\n}\n\nfunction approximateBigIntString(num: number, precision: number): string {\n    // Use scientific notation to obtain a string in the form \"3.333333333333333e+49\"\n    const s = num.toExponential(precision); \n    // Split into mantissa and exponent parts.\n    // The regular expression matches strings of the form: /^([\\d.]+)e([+\\-]\\d+)$/\n    const match = s.match(/^([\\d.]+)e([+\\-]\\d+)$/);\n    if (!match) {\n        // For extremely small or extremely large numbers, toExponential() should follow this format.\n        // As a fallback, return Math.floor(num).toString()\n        return Math.floor(num).toString();\n    }\n    let mantissaStr = match[1]; // \"3.3333333333...\"\n    const exp = parseInt(match[2], 10); // e.g. +49\n\n    // Remove the decimal point\n    mantissaStr = mantissaStr.replace('.', ''); \n    // Get the current length of the mantissa string\n    const len = mantissaStr.length; \n    // Calculate the required integer length: for exp ≥ 0, we want the integer part\n    // to have (1 + exp) digits.\n    const integerLen = 1 + exp; \n    if (integerLen <= 0) {\n        // This indicates num < 1 (e.g., exponent = -1, mantissa = \"3\" results in 0.xxx)\n        // For big integer comparison, such a number is very small, so simply return \"0\"\n        return \"0\";\n    }\n\n    if (len < integerLen) {\n        // The mantissa is not long enough; pad with zeros at the end.\n        return mantissaStr.padEnd(integerLen, '0');\n    }\n    // If the mantissa is too long, truncate it (this is equivalent to taking the floor).\n    // Rounding could be applied if necessary, but truncation is sufficient for comparison.\n    return mantissaStr.slice(0, integerLen);\n}","/**\n * This interpreter implements an explicit-control evaluator.\n *\n * Heavily adapted from https://github.com/source-academy/JSpike/\n */\n\n/* tslint:disable:max-classes-per-file */\n\nimport { StmtNS, ExprNS } from '../ast-types';\nimport { PyClosure, JsClosure } from './py_closure';\nimport { PyContext } from './py_context';\nimport { PyControl, PyControlItem } from './py_control';\nimport { createEnvironment, currentEnvironment, pushEnvironment, popEnvironment } from './py_environment';\nimport { PyNode, Instr, InstrType, UnOpInstr, BinOpInstr, BoolOpInstr, AssmtInstr, AppInstr, BranchInstr } from './py_types';\nimport { Stash, Value, ErrorValue } from './stash';\nimport { IOptions } from '../runner/pyRunner';\nimport * as instrCreator from './py_instrCreator';\nimport { evaluateUnaryExpression, evaluateBinaryExpression, evaluateBoolExpression, isFalsy } from './py_operators';\nimport { Result, Finished, CSEBreak, Representation} from '../types';\nimport { toPythonString } from '../py_stdlib'\nimport { pyGetVariable, pyDefineVariable, scanForAssignments } from './py_utils';\n\n\ntype CmdEvaluator = (\n  code: string,\n  command: PyControlItem,\n  context: PyContext,\n  control: PyControl,\n  stash: Stash,\n  isPrelude: boolean\n) => void\n\n/**\n * Function that returns the appropriate Promise<Result> given the output of CSE machine evaluating, depending\n * on whether the program is finished evaluating, ran into a breakpoint or ran into an error.\n * @param context The context of the program.\n * @param value The value of CSE machine evaluating the program.\n * @returns The corresponding promise.\n */\nexport function PyCSEResultPromise(context: PyContext, value: Value): Promise<Result> {\n    return new Promise((resolve, reject) => {\n        if (value instanceof CSEBreak) {\n            resolve({ status: 'suspended-cse-eval', context });\n        } else if (value && (value as any).type === 'error') {\n            const errorValue = value as ErrorValue;\n            const representation = new Representation(errorValue.message);\n            resolve({ status: 'finished', context, value, representation });\n        } else {\n            const representation = new Representation(toPythonString(value));\n            resolve({ status: 'finished', context, value, representation });\n        }\n    });\n}\n\n/**\n * Function to be called when a program is to be interpreted using\n * the explicit control evaluator.\n *\n * @param code For error message reference.\n * @param program The program to evaluate.\n * @param context The context to evaluate the program in.\n * @param options Evaluation options.\n * @returns The result of running the CSE machine.\n */\nexport function PyEvaluate(code: string, program: StmtNS.Stmt, context: PyContext, options: IOptions): Value {\n    try {\n        context.runtime.isRunning = true;\n        context.control = new PyControl(program);\n        \n        const result = pyRunCSEMachine(\n            code, \n            context, \n            context.control, \n            context.stash, \n            options.envSteps,\n            options.stepLimit,\n            options.isPrelude || false,\n        );\n        return context.output ? { type: \"string\", value: context.output} : result;\n    } catch(error: any) {\n        return { type: 'error', message: error.message};\n    } finally {\n        context.runtime.isRunning = false;\n    }\n}\n\n/**\n * The primary runner/loop of the explicit control evaluator.\n *\n * @param code For error check reference.\n * @param context The context to evaluate the program in.\n * @param control Points to the current Control stack.\n * @param stash Points to the current Stash.\n * @param envSteps Number of environment steps to run.\n * @param stepLimit Maximum number of steps to execute.\n * @param isPrelude Whether the program is the prelude.\n * @returns The top value of the stash after execution.\n */\nexport function pyRunCSEMachine(\n    code: string, \n    context: PyContext, \n    control: PyControl, \n    stash: Stash, \n    envSteps: number,\n    stepLimit: number,\n    isPrelude: boolean = false\n    ): Value {\n    const eceState = pyGenerateCSEMachineStateStream(\n        code,\n        context,\n        control,\n        stash,\n        envSteps,\n        stepLimit,\n        isPrelude\n      );\n    \n      // Execute the generator until it completes\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      for (const _ of eceState) {\n      }\n      \n      // Return the value at the top of the storage as the result\n      const result = stash.peek();\n      return result !== undefined ? result : { type: 'undefined' };\n    }\n\n/**\n * Generator function that yields the state of the CSE Machine at each step.\n *\n * @param code For error check reference.\n * @param context The context of the program.\n * @param control The control stack.\n * @param stash The stash storage.\n * @param envSteps Number of environment steps to run.\n * @param stepLimit Maximum number of steps to execute.\n * @param isPrelude Whether the program is the prelude.\n * @yields The current state of the stash, control stack, and step count.\n */\nexport function* pyGenerateCSEMachineStateStream(\n  code: string,\n  context: PyContext,\n  control: PyControl,\n  stash: Stash,\n  envSteps: number,\n  stepLimit: number,\n  isPrelude: boolean = false\n) {\n\n  // steps: number of steps completed\n  let steps = 0\n\n  let command = control.peek()\n\n  // Push first node to be evaluated into context.\n  // The typeguard is there to guarantee that we are pushing a node (which should always be the case)\n  if (command && !('instrType' in command)) {\n    context.runtime.nodes.unshift(command)\n  }\n  \n  while (command) {\n    \n    // Return to capture a snapshot of the control and stash after the target step count is reached\n    // if (!isPrelude && steps === envSteps) {\n    //   yield { stash, control, steps }\n    //   return\n    // }\n\n    // Step limit reached, stop further evaluation\n    // TODO: error\n    if (!isPrelude && steps === stepLimit) {\n    //   handleRuntimeError(context, new error.StepLimitExceededError(source, command as es.Node, context));\n    }\n\n    // TODO: until envChanging is implemented\n    // if (!isPrelude && envChanging(command)) {\n    //   // command is evaluated on the next step\n    //   // Hence, next step will change the environment\n    //   context.runtime.changepointSteps.push(steps + 1)\n    // }\n\n    control.pop()\n    if (!('instrType' in command)) {\n    // Command is an AST node\n      const node = command as PyNode\n\n      context.runtime.nodes.shift();\n      context.runtime.nodes.unshift(node);\n\n      const nodeType = node.constructor.name;\n      if (pyCmdEvaluators[nodeType]) {\n        pyCmdEvaluators[nodeType](code, command, context, control, stash, isPrelude)\n      } else {\n        throw new Error(`Unknown Python AST node type: ${nodeType}`);\n      }\n      \n      if (context.runtime.break && context.runtime.debuggerOn) {\n        // TODO\n        // We can put this under isNode since context.runtime.break\n        // will only be updated after a debugger statement and so we will\n        // run into a node immediately after.\n        // With the new evaluator, we don't return a break\n        // return new CSEBreak()\n      }\n    } else {\n      // Command is an instruction\n      const instr = command as Instr;\n      if (pyCmdEvaluators[instr.instrType]) {\n      pyCmdEvaluators[instr.instrType](code, command, context, control, stash, isPrelude);\n      } else {\n        throw new Error(`Unknown instruction type: ${instr.instrType}`);\n      }\n    }\n\n    command = control.peek()\n    \n    steps += 1\n    if (!isPrelude) {\n      context.runtime.envStepsTotal = steps\n    }\n\n    yield { stash, control, steps }\n  }\n}\n\nconst pyCmdEvaluators: { [type: string]: CmdEvaluator } = {\n    /**\n     * AST Node Handlers\n     */\n\n    'FileInput': (code, command, context, control, stash, isPrelude) => {\n        const fileInput = command as StmtNS.FileInput;\n        const statements = fileInput.statements.slice().reverse();\n        control.push(...statements);\n    },\n\n    'SimpleExpr': (code, command, context, control, stash, isPrelude) => {\n        const simpleExpr = command as StmtNS.SimpleExpr;\n        control.push(simpleExpr.expression);\n    },\n\n    'Literal': (code, command, context, control, stash, isPrelude) => {\n        const literal = command as ExprNS.Literal;\n        if (typeof literal.value === 'number') {\n            stash.push({ type: 'number', value: literal.value });\n        } else if (typeof literal.value === 'boolean') {\n            stash.push({ type: 'bool', value: literal.value });\n        } else if (typeof literal.value === 'string') {\n            stash.push({ type: 'string', value: literal.value });\n        } else {\n            stash.push({ type: 'undefined' }); // For null\n        }\n    },\n\n    'BigIntLiteral': (code, command, context, control, stash, isPrelude) => {\n        const literal = command as ExprNS.BigIntLiteral;\n        stash.push({ type: 'bigint', value: BigInt(literal.value) });\n    },\n\n    'Unary': (code, command, context, control, stash, isPrelude) => {\n        const unary = command as ExprNS.Unary;\n        const op_instr = instrCreator.unOpInstr(unary.operator.type, unary);\n        control.push(op_instr);\n        control.push(unary.right);\n    },\n\n    'Binary': (code, command, context, control, stash, isPrelude) => {\n        const binary = command as ExprNS.Binary;\n        const op_instr = instrCreator.binOpInstr(binary.operator.type, binary);\n        control.push(op_instr);\n        control.push(binary.right);\n        control.push(binary.left);\n    },\n\n    'BoolOp': (code, command, context, control, stash, isPrelude) => {\n        const boolOp = command as ExprNS.BoolOp;\n        control.push(instrCreator.boolOpInstr(boolOp.operator.type, boolOp));\n        control.push(boolOp.right);\n        control.push(boolOp.left);\n    },\n\n    'Grouping': (code, command, context, control, stash, isPrelude) => {\n        const groupingNode = command as ExprNS.Grouping;\n        control.push(groupingNode.expression);\n    },\n\n    'Complex': (code, command, context, control, stash, isPrelude) => {\n        const complexNode = command as ExprNS.Complex;\n        stash.push({ type: 'complex', value: complexNode.value });\n    },\n\n    'None': (code, command, context, control, stash, isPrelude) => {\n        stash.push({ type: 'undefined' });\n    },\n\n    'Variable': (code, command, context, control, stash, isPrelude) => {\n        const variableNode = command as ExprNS.Variable;\n        const name = variableNode.name.lexeme;\n        \n        // if not built in, look up in environment\n        const value = pyGetVariable(code, context, name, variableNode)\n        stash.push(value);\n    },\n\n    'Compare': (code, command, context, control, stash, isPrelude) => {\n        const compareNode = command as ExprNS.Compare;\n        // For now, we only handle simple, single comparisons.\n        const op_instr = instrCreator.binOpInstr(compareNode.operator.type, compareNode);\n        control.push(op_instr);\n        control.push(compareNode.right);\n        control.push(compareNode.left);\n    },\n    \n    'Assign': (code, command, context, control, stash, isPrelude) => {\n        const assignNode = command as StmtNS.Assign;\n\n        const assmtInstr = instrCreator.assmtInstr(\n            assignNode.name.lexeme, \n            false,\n            true,\n            assignNode\n        );\n\n        control.push(assmtInstr);\n        control.push(assignNode.value);\n    },\n\n    'Call': (code, command, context, control, stash, isPrelude) => {\n        const callNode = command as ExprNS.Call;\n        \n        // push application instruction, track number of arguments\n        control.push(instrCreator.appInstr(callNode.args.length, callNode));\n\n        // push arguments onto stacks in reverse order\n        for (let i = callNode.args.length - 1; i >= 0; i--) {\n            control.push(callNode.args[i]);\n        }\n\n        // push function expression itself\n        control.push(callNode.callee);\n    },\n\n    'FunctionDef': (code, command, context, control, stash, isPrelude) => {\n        const functionDefNode = command as StmtNS.FunctionDef;\n\n        // find all local variables defined in function body\n        const localVariables = scanForAssignments(functionDefNode.body);\n        // create closure, capture function code and environment\n        const closure = PyClosure.makeFromFunctionDef(\n            functionDefNode,\n            currentEnvironment(context),\n            context,\n            localVariables\n        );\n        // define function name in current environment and bind to new closure\n        pyDefineVariable(context, functionDefNode.name.lexeme, closure);\n    },\n\n    'Lambda': (code, command, context, control, stash, isPrelude) => {\n        const lambdaNode = command as ExprNS.Lambda;\n\n        // find all local variables defined in function body\n        const localVariables = scanForAssignments(lambdaNode.body);\n        //create closure, capturing current environment\n        const closure = PyClosure.makeFromLambda(\n            lambdaNode,\n            currentEnvironment(context),\n            context,\n            localVariables\n        );\n        // lambda is expression, just push value onto stash\n        stash.push(closure);\n    },\n\n    /** \n     * Only handles explicit return for now\n     * To handle implicit return None next\n     */\n    'Return': (code, command, context, control, stash, isPrelude) => { \n        const returnNode = command as StmtNS.Return;\n\n        let head;\n\n        while (true) {\n            head = control.pop();\n\n            // if stack is empty before RESET, break\n            if (!head || (('instrType' in head) && head.instrType === InstrType.RESET)) {\n                break;\n            }\n        }\n        if (head) {\n            control.push(head);\n        }\n        // explicit return \n        if (returnNode.value) {\n            control.push(returnNode.value);\n        } else {\n            // if just return, returns None like implicit return\n            stash.push({ type: 'undefined' });\n        }\n    },\n\n    'If': (code, command, context, control, stash, isPrelude) => {\n        const ifNode = command as StmtNS.If;\n\n        // create branch instruction, wrap statement arrays in 'StatementSequence' objects\n        const branch = instrCreator.branchInstr(\n            { type: 'StatementSequence', body: ifNode.body },\n            ifNode.elseBlock\n                ? (Array.isArray(ifNode.elseBlock)\n                    // 'else' block\n                    ? {type: 'StatementSequence', body: ifNode.elseBlock }            \n                    // 'elif' block\n                    : ifNode.elseBlock)\n                // 'else' block dont exist\n                : null,\n            ifNode\n        );\n        control.push(branch);\n        control.push(ifNode.condition);\n    },\n\n    'Ternary': (code, command, context, control, stash, isPrelude) => {\n        const ternaryNode = command as ExprNS.Ternary;\n            const branch = instrCreator.branchInstr(\n                ternaryNode.consequent,\n                ternaryNode.alternative,\n                ternaryNode\n            );\n        control.push(branch);\n        control.push(ternaryNode.predicate);\n    },\n\n    'FromImport': (code, command, context, control, stash, isPrelude) => {\n           // TODO: nothing to do for now, we can implement it for CSE instructions later on\n           // All modules are preloaded into the global environment by the runner.\n           // When the code later uses the module name (e.g., 'runes'), pyGetVariable\n           // will find it in the global scope.\n       },\n\n    /**\n     * Instruction Handlers\n     */\n    [InstrType.UNARY_OP]: function (code, command, context, control, stash, isPrelude) {\n        const instr = command as UnOpInstr;\n        const argument = stash.pop();\n        if (argument) {\n            const result = evaluateUnaryExpression(\n                code,\n                instr.srcNode as ExprNS.Expr,\n                context,\n                instr.symbol,\n                argument\n                \n            );\n            stash.push(result);\n        }\n    },\n\n    [InstrType.BINARY_OP]: function (code, command, context, control, stash, isPrelude) {\n        const instr = command as BinOpInstr;\n        const right = stash.pop();\n        const left = stash.pop();\n        if (left && right) {\n            const result = evaluateBinaryExpression(\n                code, \n                instr.srcNode as ExprNS.Expr,\n                context,\n                instr.symbol,\n                left,\n                right\n            );\n            stash.push(result);\n        }\n    },\n\n    [InstrType.BOOL_OP]: function (code, command, context, control, stash, isPrelude) {\n        const instr = command as BoolOpInstr;\n        const right = stash.pop();\n        const left = stash.pop();\n\n        if (left && right) {\n            const result = evaluateBoolExpression(\n                code,\n                instr.srcNode as ExprNS.Expr,\n                context,\n                instr.symbol,\n                left,\n                right\n            )\n            stash.push(result);\n        }\n    },\n\n    [InstrType.ASSIGNMENT]: (code, command, context, control, stash, isPrelude) => {\n        const instr = command as AssmtInstr;\n        // Get the evaluated value from the stash\n        const value = stash.pop(); \n\n        if (value) {\n            pyDefineVariable(context, instr.symbol, value);\n        }\n    },\n\n    [InstrType.APPLICATION]: (code, command, context, control, stash, isPrelude) => {\n        const instr = command as AppInstr;\n        const numOfArgs = instr.numOfArgs;\n\n        // pop evaluated arguments from stash\n        const args = [];\n        for (let i = 0; i < numOfArgs; i++) {\n            args.unshift(stash.pop());\n        }\n\n        // pop callable from stash\n        const callable = stash.pop();\n\n        if (callable instanceof PyClosure) {\n            // User-defined function\n            const closure = callable as PyClosure;\n            // push reset and implicit return for cleanup at end of function\n            control.push(instrCreator.resetInstr(instr.srcNode));\n\n            // Only push endOfFunctionBodyInstr for functionDef\n            if (closure.node.constructor.name === 'FunctionDef') {\n                control.push(instrCreator.endOfFunctionBodyInstr(instr.srcNode));\n            }\n\n            // create new function environment\n            const newEnv = createEnvironment(context, closure, args, instr.srcNode as ExprNS.Call);\n            pushEnvironment(context, newEnv);\n\n            // push function body onto control stack\n            const closureNode = closure.node;\n            if (closureNode.constructor.name === 'FunctionDef') {\n               // 'def' has a body of statements (an array)\n                const bodyStmts = (closureNode as StmtNS.FunctionDef).body.slice().reverse();\n                control.push(...bodyStmts);\n            } else {\n               // 'lambda' has a body with a single expression\n               const bodyExpr = (closureNode as ExprNS.Lambda).body;\n               control.push(bodyExpr);\n            }\n        } else if (callable instanceof JsClosure) {\n            const result = callable.call(args);\n            stash.push(result);\n        } else {\n            // Built-in function from stdlib / constants\n            const result = (callable as any)(context, ...args);\n            stash.push(result);\n        }\n    },\n\n    [InstrType.RESET]: (code, command, context, control, stash, isPrelude) => {\n        popEnvironment(context);\n    },\n\n    [InstrType.END_OF_FUNCTION_BODY]: (code, command, context, control, stash, isPrelude) => {\n        // this is only reached if function runs to completion without explicit return \n        stash.push({ type: 'undefined' });\n    },\n\n    [InstrType.BRANCH]: (code, command, context, control, stash, isPrelude) => {\n        const instr = command as BranchInstr;\n        const condition = stash.pop();\n\n        if (!isFalsy(condition)) {\n            // Condition is truthy, execute the consequent\n            const consequent = instr.consequent;\n            if (consequent && 'type' in consequent && consequent.type === 'StatementSequence') {\n                control.push(...(consequent as any).body.slice().reverse());\n            } else if (consequent) {\n                // consequent of ternary or single statement\n                control.push(consequent);\n            }\n        } else if (instr.alternate) {\n            // Condition is falsy, execute the alternate\n            const alternate = instr.alternate;\n            if (alternate && 'type' in alternate && alternate.type === 'StatementSequence') {\n                // 'else' block\n                control.push(...(alternate as any).body.slice().reverse());\n            } else if (alternate) {\n                // 'elif' or ternary alternative\n                control.push(alternate);\n            }\n        }\n        // If condition is falsy and there's no alternate, do nothing\n    },\n\n    [InstrType.POP]: (code, command, context, control, stash, isPrelude) => {\n        stash.pop();\n    },\n\n};","import * as es from 'estree'\nimport { Context } from '../cse-machine/context'\n\nexport enum ErrorType {\n  IMPORT = 'Import',\n  RUNTIME = 'Runtime',\n  SYNTAX = 'Syntax',\n  TYPE = 'Type'\n}\n\nexport enum ErrorSeverity {\n  WARNING = 'Warning',\n  ERROR = 'Error'\n}\n\n// any and all errors ultimately implement this interface. as such, changes to this will affect every type of error.\nexport interface SourceError {\n  type: ErrorType\n  severity: ErrorSeverity\n  location: es.SourceLocation\n  explain(): string\n  elaborate(): string\n}\n\n// Base error and shared helpers\nexport const UNKNOWN_LOCATION: es.SourceLocation = {\n  start: {\n    line: -1,\n    column: -1\n  },\n  end: {\n    line: -1,\n    column: -1\n  }\n}\n\nexport class RuntimeSourceError implements SourceError {\n  public type = ErrorType.RUNTIME\n  public severity = ErrorSeverity.ERROR\n  public location: es.SourceLocation\n  public message = 'Error'\n\n  constructor(node?: es.Node) {\n    this.location = node?.loc ?? UNKNOWN_LOCATION\n  }\n\n  public explain() {\n    return ''\n  }\n\n  public elaborate() {\n    return this.explain()\n  }\n}\n\n// Local copy to avoid circular import from utils\nfunction typeTranslator(type: string): string {\n  switch (type) {\n    case 'bigint':\n      return 'int'\n    case 'number':\n      return 'float'\n    case 'boolean':\n      return 'bool'\n    case 'bool':\n      return 'bool'\n    case 'string':\n      return 'string'\n    case 'complex':\n      return 'complex'\n    default:\n      return 'unknown'\n  }\n}\n\n/* Searches backwards and forwards till it hits a newline */\nfunction getFullLine(source: string, current: number): { line: number; fullLine: string } {\n  let back: number = current;\n  let forward: number = current;\n\n  while (back > 0 && source[back] != '\\n') {\n      back--;\n  }\n  if (source[back] === '\\n') {\n      back++;\n  }\n  while (forward < source.length && source[forward] != '\\n') {\n      forward++;\n  }\n\n  const line = source.slice(0, back).split('\\n').length;\n  const fullLine = source.slice(back, forward);\n\n  return {line, fullLine};\n}\n\nexport function createErrorIndicator(snippet: string, errorOp: string = '/'): string {\n  const pos = snippet.indexOf(errorOp);\n  let indicator = \"\";\n  for (let i = 0; i < snippet.length; i++) {\n    indicator += (i === pos ? \"^\" : \"~\");\n  }\n  return indicator;\n}\n\nexport class TypeConcatenateError extends RuntimeSourceError {\n    constructor(source: string, node: es.Node, wrongType: string) {\n        super(node);\n        this.type = ErrorType.TYPE;\n\n        let index = (node as any).symbol?.loc?.start?.index;\n        const { line, fullLine } = getFullLine(source, index);\n        const snippet = (node as any).symbol?.loc?.source ?? '<unknown source>';\n        \n        let hint = 'TypeError: can only concatenate str (not \"' + wrongType + '\") to str.';\n        const offset = fullLine.indexOf(snippet);\n        const indicator = createErrorIndicator(snippet, '+');\n        const name = \"TypeError\";\n        const suggestion = \"You are trying to concatenate a string with an \" + wrongType + \". To fix this, convert the \" + wrongType + \" to a string using str(), or ensure both operands are of the same type.\";\n        const msg = name + \" at line \" + line + \"\\n\\n    \" + fullLine + \"\\n    \" + \" \".repeat(offset) + indicator + \"\\n\" + hint + \"\\n\" + suggestion;\n        this.message = msg;\n    }\n}\n\nexport class UnsupportedOperandTypeError extends RuntimeSourceError {\n    constructor(source: string, node: es.Node, wrongType1: string, wrongType2: string, operand: string) {\n        super(node);\n        this.type = ErrorType.TYPE;\n\n        let index = (node as any).symbol?.loc?.start?.index ?? \n                    (node as any).srcNode?.loc?.start?.index;\n        const { line, fullLine } = getFullLine(source, index);\n        const snippet = (node as any).symbol?.loc?.source ?? \n                        (node as any).srcNode?.loc?.source ?? \n                        '<unknown source>';\n        let hint = \"TypeError: unsupported operand type(s) for \" + operand + \": '\" + wrongType1 + \"' and '\" + wrongType2 + \"'\";\n        const offset = fullLine.indexOf(snippet);\n        const indicator = createErrorIndicator(snippet, operand);\n        const name = \"TypeError\";\n        const suggestion = \"You are using the '\" + operand+ \"' operator between a '\" + wrongType1 + \"' and a '\" + wrongType2 + \"', which are not compatible types for this operation.\\nMake sure both operands are of the correct type.\";\n        const msg = name + \" at line \" + line + \"\\n\\n    \" + fullLine + \"\\n    \" + \" \".repeat(offset) + indicator + \"\\n\" + hint + \"\\n\" + suggestion;\n        this.message = msg;\n    }\n}\n\nexport class MissingRequiredPositionalError extends RuntimeSourceError {\n    private functionName: string;\n    private missingParamCnt: number;\n    private missingParamName: string;\n  \n    constructor(source: string, node: es.Node, functionName: string, params: any, args: any, variadic: boolean) {\n        super(node);\n        this.type = ErrorType.TYPE;\n        this.functionName = functionName;\n        let adverb: string = \"exactly\";\n        if (variadic) {\n          adverb = \"at least\";\n        }\n        const index = (node as any).loc?.start?.index\n                  ?? (node as any).srcNode?.loc?.start?.index\n                  ?? 0;\n        const { line, fullLine } = getFullLine(source, index);\n        this.message = 'TypeError at line ' + line + '\\n\\n    ' + fullLine + '\\n';\n\n        if (typeof params === 'number') {\n          this.missingParamCnt = params;\n          this.missingParamName = '';\n          const givenParamCnt = args.length;\n          if (this.missingParamCnt === 1 || this.missingParamCnt === 0) {}\n          const msg = `TypeError: ${this.functionName}() takes ${adverb} ${this.missingParamCnt} argument (${givenParamCnt} given)\nCheck the function definition of '${this.functionName}' and make sure to provide all required positional arguments in the correct order.`;\n          this.message += msg;\n        } else {\n          this.missingParamCnt = params.length - args.length;\n          const missingNames: string[] = [];\n          for (let i = args.length; i < params.length; i++) {\n            const param = params[i].name;\n            missingNames.push(\"\\'\"+param+\"\\'\");\n          }\n          this.missingParamName = this.joinWithCommasAndAnd(missingNames);\n          const msg = `TypeError: ${this.functionName}() missing ${this.missingParamCnt} required positional argument(s): ${this.missingParamName}\nYou called ${this.functionName}() without providing the required positional argument ${this.missingParamName}. Make sure to pass all required arguments when calling ${this.functionName}.`;\n          this.message += msg;\n        }\n    }\n\n    private joinWithCommasAndAnd(names: string[]): string {\n        if (names.length === 0) {\n          return '';\n        } else if (names.length === 1) {\n          return names[0];\n        } else if (names.length === 2) {\n          return `${names[0]} and ${names[1]}`;\n        } else {\n          const last = names.pop();\n          return `${names.join(', ')} and ${last}`;\n        }\n    }\n}\n\nexport class TooManyPositionalArgumentsError extends RuntimeSourceError {\n    private functionName: string;\n    private expectedCount: number;\n    private givenCount: number;\n  \n    constructor(source: string, node: es.Node, functionName: string, params: any, args: any, variadic: boolean) {\n      super(node);\n      this.type = ErrorType.TYPE;\n      this.functionName = functionName;\n      let adverb: string = \"exactly\";\n      if (variadic) {\n        adverb = \"at most\";\n      }\n\n      const index = (node as any).loc?.start?.index\n                  ?? (node as any).srcNode?.loc?.start?.index\n                  ?? 0;\n      const { line, fullLine } = getFullLine(source, index);\n      this.message = 'TypeError at line ' + line + '\\n\\n    ' + fullLine + '\\n';\n\n      if (typeof params === 'number') {\n        this.expectedCount = params;\n        this.givenCount = args.length;\n        if (this.expectedCount === 1 || this.expectedCount === 0) {\n          this.message += `TypeError: ${this.functionName}() takes ${adverb} ${this.expectedCount} argument (${this.givenCount} given)`;\n        } else {\n          this.message += `TypeError: ${this.functionName}() takes ${adverb} ${this.expectedCount} arguments (${this.givenCount} given)`;\n        }\n      } else {\n        this.expectedCount = params.length;\n        this.givenCount = args.length;\n        if (this.expectedCount === 1 || this.expectedCount === 0) {\n          this.message += `TypeError: ${this.functionName}() takes ${this.expectedCount} positional argument but ${this.givenCount} were given`;\n        } else {\n          this.message += `TypeError: ${this.functionName}() takes ${this.expectedCount} positional arguments but ${this.givenCount} were given`;\n        }\n      }\n\n      this.message += `\\nRemove the extra argument(s) when calling '${this.functionName}', or check if the function definition accepts more arguments.`;\n    }\n}\n\nexport class ZeroDivisionError extends RuntimeSourceError {\n  constructor(source: string, node: es.Node, context: Context) {\n    super(node);\n    this.type = ErrorType.TYPE;\n    let index = (node as any).symbol?.loc?.start?.index;\n    const { line, fullLine } = getFullLine(source, index);\n    const snippet = (node as any).symbol?.loc?.source ?? '<unknown source>';\n    \n    let hint = 'ZeroDivisionError: division by zero.';\n    const offset = fullLine.indexOf(snippet);\n    const indicator = createErrorIndicator(snippet, '/');\n    const name = \"ZeroDivisionError\";\n    const suggestion = \"You attempted to divide by zero. Division or modulo operations cannot be performed with a divisor of zero. Please ensure that the divisor is non-zero before performing the operation.\";\n    const msg = name + \" at line \" + line + \"\\n\\n    \" + fullLine + \"\\n    \" + \" \".repeat(offset) + indicator + \"\\n\" + hint + \"\\n\" + suggestion;\n    this.message = msg;\n  }\n}\n\nexport class StepLimitExceededError extends RuntimeSourceError {\n  constructor(source: string, node: es.Node, context: Context) {\n    super(node);\n    this.type = ErrorType.RUNTIME;\n\n    const index = (node as any).loc?.start?.index\n                  ?? (node as any).srcNode?.loc?.start?.index\n                  ?? 0;\n\n    const { line, fullLine } = getFullLine(source, index);\n\n    const snippet = (node as any).loc?.source\n                  ?? (node as any).srcNode?.loc?.source\n                  ?? '<unknown source>';\n\n    const indicator = createErrorIndicator(fullLine, '@');  // no target symbol\n\n    const name = 'StepLimitExceededError';\n    const hint = 'The evaluation has exceeded the maximum step limit.';\n\n    const offset = fullLine.indexOf(fullLine);\n    const adjustedOffset = offset >= 0 ? offset : 0;\n\n    const msg = [\n      `${name} at line ${line}`,\n      '',\n      '    ' + fullLine,\n      '    ' + ' '.repeat(adjustedOffset) + indicator,\n      hint\n    ].join('\\n');\n\n    this.message = msg;\n  }\n}\n\nexport class ValueError extends RuntimeSourceError {\n  constructor(source: string, node: es.Node, context: Context, functionName: string) {\n    super(node);\n    this.type = ErrorType.TYPE;\n    const index = (node as any).loc?.start?.index\n                  ?? (node as any).srcNode?.loc?.start?.index\n                  ?? 0;\n    const { line, fullLine } = getFullLine(source, index);\n    const snippet = (node as any).loc?.source\n                  ?? (node as any).srcNode?.loc?.source\n                  ?? '<unknown source>';\n    let hint = 'ValueError: math domain error. ';\n    const offset = fullLine.indexOf(snippet);\n    const indicator = createErrorIndicator(snippet, '@');\n    const name = \"ValueError\";\n    const suggestion = `Ensure that the input value(s) passed to '${functionName}' satisfy the mathematical requirements`;\n    const msg = name + \" at line \" + line + \"\\n\\n    \" + fullLine + \"\\n    \" + \" \".repeat(offset) + indicator + \"\\n\" + hint + suggestion;\n    this.message = msg;\n  }\n}\n\nexport class TypeError extends RuntimeSourceError {\n  constructor(source: string, node: es.Node, context: Context, originalType: string, targetType: string) {\n    super(node);\n    originalType = typeTranslator(originalType);\n    this.type = ErrorType.TYPE;\n    const index = (node as any).loc?.start?.index\n                  ?? (node as any).srcNode?.loc?.start?.index\n                  ?? 0;\n    const { line, fullLine } = getFullLine(source, index);\n    const snippet = (node as any).loc?.source\n                  ?? (node as any).srcNode?.loc?.source\n                  ?? '<unknown source>';\n    let hint = \"TypeError: '\" + originalType + \"' cannot be interpreted as an '\" + targetType + \"'.\";\n    const offset = fullLine.indexOf(snippet);\n    const adjustedOffset = offset >= 0 ? offset : 0;\n    const indicator = createErrorIndicator(snippet, '@');\n    const name = \"TypeError\";\n    const suggestion = ' Make sure the value you are passing is compatible with the expected type.';\n    const msg = name + \" at line \" + line + \"\\n\\n    \" + fullLine + \"\\n    \" + \" \".repeat(adjustedOffset) + indicator + \"\\n\" + hint + suggestion;\n    this.message = msg;\n  }\n}\n\nexport class SublanguageError extends RuntimeSourceError {\n  constructor (\n  source: string,\n  node: es.Node,\n  context: Context,\n  functionName: string,\n  chapter: string,\n  details?: string\n) {\n    super(node)\n    \n    this.type = ErrorType.TYPE\n    \n    const index = (node as any).loc?.start?.index\n                ?? (node as any).srcNode?.loc?.start?.index\n                ?? 0\n    const { line, fullLine } = getFullLine(source, index)\n    const snippet = (node as any).loc?.source\n                  ?? (node as any).srcNode?.loc?.source\n                  ?? '<unknown source>'\n    const offset = fullLine.indexOf(snippet)\n    const indicator = createErrorIndicator(snippet, '@')\n    \n    const name = 'SublanguageError'\n    const hint = 'Feature not supported in Python §' + chapter + '. '\n    const suggestion = `The call to '${functionName}()' relies on behaviour that is valid in full Python but outside the Python §1 sublanguage${details ? ': ' + details : ''}.`\n    \n    this.message = `${name} at line ${line}\\n\\n ${fullLine}\\n ${' '.repeat(offset)}${indicator}\\n${hint}${suggestion}`\n  }\n}\n","import { createErrorIndicator } from \"./errors/errors\";\nimport {Token} from \"./tokenizer\";\nimport {Position} from \"estree\";\n\n/*\n    The offset is calculated as follows:    \n    Current position is one after real position of end of token: 1\n*/\nconst MAGIC_OFFSET = 1;\n\nconst SPECIAL_CHARS = new RegExp(\"[\\\\\\\\$'\\\"]\", \"g\");\n\nfunction escape(unsafe: string): string {\n    // @TODO escape newlines\n    return unsafe.replace(SPECIAL_CHARS, \"\\\\$&\");\n}\n\n/* Searches backwards and forwards till it hits a newline */\nfunction getFullLine(source: string, current: number): {lineIndex: number; msg: string} {\n    let back: number = current;\n    let forward: number = current;\n    if (source[back] == '\\n') {\n        back--;\n    }\n    while (back > 0 && source[back] != '\\n') {\n        back--;\n    }\n    if (source[back] === '\\n') {\n        back++;\n    }\n    while (forward < source.length && source[forward] != '\\n') {\n        forward++;\n    }\n    const lineIndex = source.slice(0, back).split('\\n').length;\n    const msg = source.slice(back, forward);\n\n    return {lineIndex, msg};\n}\n\nfunction toEstreeLocation(line: number, column: number, offset: number) {\n    return {line, column, offset}\n}\n\nexport namespace TokenizerErrors {\n    export class BaseTokenizerError extends SyntaxError {\n        line: number;\n        col: number;\n        loc: Position;\n\n        constructor(message: string, line: number, col: number) {\n            super(`SyntaxError at line ${line} column ${col-1}\n                   ${message}`);\n            this.line = line;\n            this.col = col;\n            this.name = \"BaseTokenizerError\";\n            this.loc = toEstreeLocation(line, col, 0);\n        }\n    }\n\n    export class UnknownTokenError extends BaseTokenizerError {\n        constructor(token: string, line: number, col: number, source: string, current: number) {\n            let { lineIndex, msg } = getFullLine(source, current-1);\n            msg = '\\n' + msg + '\\n';\n            let hint = `${col > 1 ? '~' : ''}^~ Unknown token '${escape(token)}'`;\n            // The extra `~` character takes up some space.\n            hint = hint.padStart(hint.length + col - MAGIC_OFFSET - (col > 1 ? 1 : 0), \" \");\n            super(msg + hint, lineIndex, col);\n            this.name = \"UnknownTokenError\";\n        }\n    }\n\n    export class UnterminatedStringError extends BaseTokenizerError {\n        constructor(line: number, col: number, source: string, start: number, current: number) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = `^ Unterminated string`;\n            const diff = (current - start);\n            // +1 because we want the arrow to point after the string (where we expect the closing \")\n            hint = hint.padStart(hint.length + diff - MAGIC_OFFSET + 1, \"~\");\n            hint = hint.padStart(hint.length + col - diff, \" \");\n            super(msg + hint, lineIndex, col);\n            this.name = \"UnterminatedStringError\";\n        }\n    }\n\n    export class NonFourIndentError extends BaseTokenizerError {\n        constructor(line: number, col: number, source: string, start: number) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = `^ This indent should be a multiple of 4 spaces. It's currently ${col} spaces.`;\n            hint = hint.padStart(hint.length + col - MAGIC_OFFSET, \"-\");\n            super(msg + hint, lineIndex, col);\n            this.name = \"NonFourIndentError\";\n        }\n    }\n\t\n    export class InvalidNumberError extends BaseTokenizerError {\n        constructor(line: number, col: number, source: string, start: number, current: number) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = `^ Invalid Number input.`;\n            const diff = (current - start);\n            // +1 because we want the arrow to point after the string (where we expect the closing \")\n            hint = hint.padStart(hint.length + diff - MAGIC_OFFSET + 1, \"~\");\n            hint = hint.padStart(hint.length + col - diff, \" \");\n            super(msg + hint, lineIndex, col);\n            this.name = \"InvalidNumberError\";\n        }\n    }\n\n    export class InconsistentIndentError extends BaseTokenizerError {\n        constructor(line: number, col: number, source: string, start: number) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = `^ This indent/dedent is inconsistent with other indents/dedents. It's currently ${col} spaces.`;\n            hint = hint.padStart(hint.length + col - MAGIC_OFFSET, \"-\");\n            super(msg + hint, lineIndex, col);\n            this.name = \"InconsistentIndentError\";\n        }\n    }\n    export class ForbiddenIdentifierError extends BaseTokenizerError {\n        constructor(line: number, col: number, source: string, start: number) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = `^ This identifier is reserved for use in Python. Consider using another identifier.`;\n            hint = hint.padStart(hint.length + col - MAGIC_OFFSET, \"^\");\n            super(msg + hint, lineIndex, col);\n            this.name = \"ForbiddenIdentifierError\";\n        }\n    }\n    export class ForbiddenOperatorError extends BaseTokenizerError {\n        constructor(line: number, col: number, source: string, start: number, current: number) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = ` This operator is reserved for use in Python. It's not allowed to be used.`;\n            const diff = (current - start);\n            hint = hint.padStart(hint.length + diff - MAGIC_OFFSET + 1, \"^\");\n            hint = hint.padStart(hint.length + col - diff, \" \");\n            super(msg + hint, lineIndex, col);\n            this.name = \"ForbiddenOperatorError\";\n        }\n    }\n\n    export class NonMatchingParenthesesError extends BaseTokenizerError {\n        constructor(line: number, col: number, source: string, current: number) {\n            let { lineIndex, msg } = getFullLine(source, current-1);\n            msg = '\\n' + msg + '\\n';\n            let hint = `${col > 1 ? '~' : ''}^~ Non-matching closing parentheses.`;\n            // The extra `~` character takes up some space.\n            hint = hint.padStart(hint.length + col - MAGIC_OFFSET - (col > 1 ? 1 : 0), \" \");\n            super(msg + hint, lineIndex, col);\n            this.name = \"NonMatchingParenthesesError\";\n        }\n    }\n}\n\nexport namespace ParserErrors {\n    export class BaseParserError extends SyntaxError {\n        line: number;\n        col: number;\n        loc: Position;\n\n        constructor(message: string, line: number, col: number) {\n            super(`SyntaxError at line ${line}\n                   ${message}`);\n            this.line = line;\n            this.col = col;\n            this.name = \"BaseParserError\";\n            this.loc = toEstreeLocation(line, col, 0);\n        }\n    }\n    export class ExpectedTokenError extends BaseParserError {\n        constructor(source: string, current: Token, expected: string) {\n            let { lineIndex, msg } = getFullLine(source, current.indexInSource - current.lexeme.length);\n            msg = '\\n' + msg + '\\n';\n            let hint = `^ ${expected}. Found '${escape(current.lexeme)}'.`;\n            hint = hint.padStart(hint.length + current.col - MAGIC_OFFSET, \" \");\n            super(msg + hint, lineIndex, current.col);\n            this.name = \"ExpectedTokenError\";\n        }\n    }\n    export class NoElseBlockError extends BaseParserError {\n        constructor(source: string, current: Token) {\n            let { lineIndex, msg } = getFullLine(source, current.indexInSource);\n            msg = '\\n' + msg + '\\n';\n            let hint = `^ Expected else block after this if block.`;\n            hint = hint.padStart(hint.length + current.col - MAGIC_OFFSET, \" \");\n            super(msg + hint, lineIndex, current.col);\n            this.name = \"ExpectedTokenError\";\n        }\n    }\n    export class GenericUnexpectedSyntaxError extends BaseParserError {\n        constructor(line: number, col: number, source: string, start: number, current: number) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = ` Detected invalid syntax.`;\n            const indicator = createErrorIndicator(msg, '@');\n            super(msg + indicator + hint, lineIndex, col);\n            this.name = \"GenericUnexpectedSyntaxError\";\n        }\n    }\n}\n\nexport namespace ResolverErrors {\n    export class BaseResolverError extends SyntaxError {\n        line: number;\n        col: number;\n        loc: Position;\n\n        constructor(name: string, message: string, line: number, col: number) {\n            super(`${name} at line ${line}\n                   ${message}`);\n            this.line = line;\n            this.col = col;\n            this.name = \"BaseResolverError\";\n            this.loc = toEstreeLocation(line, col, 0);\n        }\n    }\n    export class NameNotFoundError extends BaseResolverError {\n        constructor(line: number, col: number, source: string, start: number,\n                    current: number, suggestion: string | null) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = ` This name is not found in the current or enclosing environment(s).`;\n            const diff = (current - start);\n            hint = hint.padStart(hint.length + diff - MAGIC_OFFSET + 1, \"^\");\n            hint = hint.padStart(hint.length + col - diff, \" \");\n            if (suggestion !== null) {\n                let sugg = ` Perhaps you meant to type '${suggestion}'?`\n                sugg = sugg.padStart(sugg.length + col - MAGIC_OFFSET + 1, \" \");\n                sugg = '\\n' + sugg;\n                hint += sugg;\n            }\n            const name = \"NameNotFoundError\";\n            super(name, msg + hint, lineIndex, col);\n            this.name = \"NameNotFoundError\";\n        }\n    }\n\n    export class NameReassignmentError extends BaseResolverError {\n        constructor(line: number, col: number, source: string, start: number,\n                    current: number, oldName: Token) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = ` A name has been declared here.`;\n            const diff = (current - start);\n            hint = hint.padStart(hint.length + diff - MAGIC_OFFSET + 1, \"^\");\n            hint = hint.padStart(hint.length + col - diff, \" \");\n            let { lineIndex: oldLine, msg: oldNameLine } = getFullLine(source, oldName.indexInSource);\n            oldNameLine = '\\n' + oldNameLine + '\\n';\n            let sugg = ` However, it has already been declared in the same environment at line ${oldLine}, here: `\n            sugg = sugg.padStart(sugg.length + col - MAGIC_OFFSET + 1, \" \");\n            sugg = '\\n' + sugg;\n            hint += sugg;\n            oldNameLine.padStart(oldNameLine.length + col - MAGIC_OFFSET + 1, \" \");\n            hint += oldNameLine;\n            const name = \"NameReassignmentError\";\n            super(name, msg + hint, lineIndex, col);\n            this.name = \"NameReassignmentError\";\n        }\n    }\n}\n\nexport namespace TranslatorErrors {\n    export class BaseTranslatorError extends SyntaxError {\n        line: number;\n        col: number;\n        loc: Position;\n\n        constructor(message: string, line: number, col: number) {\n            super(`BaseTranslatorError at line ${line} column ${col-1}\n                   ${message}`);\n            this.line = line;\n            this.col = col;\n            this.name = \"BaseTranslatorError\";\n            this.loc = toEstreeLocation(line, col, 0);\n        }\n    }\n    export class UnsupportedOperator extends BaseTranslatorError {\n        constructor(line: number, col: number, source: string, start: number) {\n            let { lineIndex, msg } = getFullLine(source, start);\n            msg = '\\n' + msg + '\\n';\n            let hint = `^ This operator is not yet supported by us.`;\n            hint = hint.padStart(hint.length + col - MAGIC_OFFSET, \" \");\n            super(msg + hint, lineIndex, col);\n            this.name = \"UnsupportedOperator\";\n        }\n    }\n}","/*\n* Full disclosure: The general structure of this file is adapted from my own\n* Rust implementation of a scanner\n* https://github.com/Fidget-Spinner/crafting_interpreters/blob/main/rust/src/scanner.rs.\n* That is in turn is adapted from the Java code written by the excellent book,\n* \"Crafting Interpreters\" https://craftinginterpreters.com/scanning.html.\n* Said book's copyright is under Robert Nystrom.\n* I've included the MIT license that code snippets from\n* the book is licensed under down below. See\n* https://github.com/munificent/craftinginterpreters/blob/master/LICENSE\n*\n* The changes I've made: I have rewritten basically everything from scratch.\n* Only the method names and overall method APIs\n* are the same. Their internal behaviors are quite different as the scanner\n* in the book parses a JS-like language, not Python.\n*\n* - The book was written in Java. I have written this in TypeScript.\n* - The scanner supports a whitespace significant language now.\n* - Also added support for column numbers for better error messages in the future.\n* - Also added better errors.\n* - Also added forbidden identifiers.\n*\n*\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to\n    deal in the Software without restriction, including without limitation the\n    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n    sell copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n    IN THE SOFTWARE.\n* */\n\nimport { TokenType } from \"./tokens\";\nimport { TokenizerErrors } from \"./errors\";\n\nexport class Token {\n    type: TokenType;\n    lexeme: string;\n    line: number;\n    col: number;\n    indexInSource: number;\n\n    constructor(type: TokenType, lexeme: string, line: number, col: number, indexInSource: number) {\n        this.type = type;\n        this.lexeme = lexeme;\n        this.line = line;\n        this.col = col;\n        this.indexInSource = indexInSource\n    }\n}\n\nconst specialIdentifiers = new Map([\n    [\"and\", TokenType.AND],\n    [\"or\", TokenType.OR],\n    [\"while\", TokenType.WHILE],\n    [\"for\", TokenType.FOR],\n    [\"None\", TokenType.NONE],\n    [\"is\", TokenType.IS],\n    [\"not\", TokenType.NOT],\n    [\"pass\", TokenType.PASS],\n    [\"def\", TokenType.DEF],\n    [\"lambda\", TokenType.LAMBDA],\n    [\"from\", TokenType.FROM],\n    [\"True\", TokenType.TRUE],\n    [\"False\", TokenType.FALSE],\n    [\"break\", TokenType.BREAK],\n    [\"continue\", TokenType.CONTINUE],\n    [\"return\", TokenType.RETURN],\n    [\"assert\", TokenType.ASSERT],\n    [\"import\", TokenType.IMPORT],\n    [\"global\", TokenType.GLOBAL],\n    [\"nonlocal\", TokenType.NONLOCAL],\n    [\"if\", TokenType.IF],\n    [\"elif\", TokenType.ELIF],\n    [\"else\", TokenType.ELSE],\n    [\"in\", TokenType.IN],\n]);\n\nexport const SPECIAL_IDENTIFIER_TOKENS = Array.from(specialIdentifiers.values());\n\n\nexport class Tokenizer {\n    private readonly source: string;\n    private readonly tokens: Token[];\n    private start: number;\n    private current: number;\n    private line: number;\n    private col: number;\n    private readonly indentStack: number[];\n    private specialIdentifiers: Map<string, TokenType>;\n    private forbiddenIdentifiers: Map<string, TokenType>;\n    private parenthesesLevel: number;\n\n    // forbiddenOperators: Set<TokenType>;\n    constructor(source: string) {\n        this.source = source;\n        this.tokens = [];\n        this.start = 0;\n        this.current = 0;\n        this.line = 0;\n        this.col = 0;\n        this.indentStack = [0];\n        this.specialIdentifiers = specialIdentifiers;\n        // Not used by us, but should be kept reserved as per Python spec\n        this.forbiddenIdentifiers = new Map([\n            [\"async\", TokenType.ASYNC],\n            [\"await\", TokenType.AWAIT],\n            [\"yield\", TokenType.YIELD],\n            [\"with\", TokenType.WITH],\n            [\"del\", TokenType.DEL],\n            [\"try\", TokenType.TRY],\n            [\"except\", TokenType.EXCEPT],\n            [\"finally\", TokenType.FINALLY],\n            [\"raise\", TokenType.RAISE],\n        ]);\n        // Operators that are valid in Python, but invalid for our use case.\n        // this.forbiddenOperators = new Set([\n        //     TokenType.AT,\n        //     // Augmented assign e.g. *=\n        //     TokenType.ATEQUAL,\n        //     TokenType.PLUSEQUAL,\n        //     TokenType.MINEQUAL,\n        //     TokenType.STAREQUAL,\n        //     TokenType.SLASHEQUAL,\n        //     TokenType.PERCENTEQUAL,\n        //     TokenType.AMPEREQUAL,\n        //     TokenType.VBAREQUAL,\n        //     TokenType.CIRCUMFLEXEQUAL,\n        //     TokenType.LEFTSHIFTEQUAL,\n        //     TokenType.RIGHTSHIFTEQUAL,\n        //     TokenType.DOUBLESTAREQUAL,\n        //     TokenType.DOUBLESLASHEQUAL,\n        // ])\n        this.parenthesesLevel = 0;\n    }\n\n    private isAtEnd() {\n        return this.current >= this.source.length;\n    }\n\n    private advance() {\n        const res = this.source[this.current];\n        if (this.peek() == '\\n') {\n            this.line += 1;\n        }\n        this.current += 1;\n        this.col += 1;\n        return res;\n    }\n\n    private lexemeBuffer: string = \"\";\n\n    private advanceString(record: boolean) {\n        const res = this.source[this.current];\n        if (this.peek() == '\\n') {\n            this.line += 1;\n        }\n        this.current += 1;\n        this.col += 1;\n        if (record) {\n            this.lexemeBuffer += res;\n        }\n        return res;\n    }\n\n    private getBuffer() {\n        console.info(this.lexemeBuffer);\n    }\n\n    private addBuffer(c: string) {\n        this.lexemeBuffer += c;\n    }\n\n    private subtractBufferForThreeQuoteString(): boolean {\n        if (this.lexemeBuffer.length >= 3) {\n            this.lexemeBuffer = this.lexemeBuffer.slice(0, -3);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /* Single character lookahead. */\n    private peek(): string {\n        return this.isAtEnd() ? '\\0' : this.source[this.current];\n    }\n\n    /* Double character lookahead. */\n\n    private overwriteToken(type: TokenType) {\n        const previousToken = this.tokens[this.tokens.length - 1];\n        const lexeme = this.source.slice(previousToken.indexInSource, this.current);\n        this.tokens[this.tokens.length - 1] = new Token(type, lexeme, previousToken.line, previousToken.col, previousToken.indexInSource);\n    }\n\n    private addToken(type: TokenType) {\n        const line = this.line\n        const col = this.col;\n        const lexeme = this.source.slice(this.start, this.current);\n        this.tokens.push(new Token(type, lexeme, line, col, this.current - lexeme.length))\n    }\n\n    private addStringToken(type: TokenType) {\n        const line = this.line\n        const col = this.col;\n        // Remove starting and ending quotes when slicing\n        // Ensures that string is parsed properly\n        const lexeme = this.source.slice(this.start + 1, this.current - 1);\n        this.tokens.push(new Token(type, this.lexemeBuffer, line, col, this.current - lexeme.length))\n        this.lexemeBuffer = \"\";\n    }\n\n    private addMultiLineStringToken(type: TokenType) {\n        const line = this.line\n        const col = this.col;\n        // Remove three starting and ending quotes when slicing\n        const lexeme = this.source.slice(this.start + 3, this.current - 3);\n        this.tokens.push(new Token(type, this.lexemeBuffer, line, col, this.current - lexeme.length))\n        this.lexemeBuffer = \"\";\n    }\n    // Checks that the current character matches a pattern. If so the character is consumed, else nothing is consumed.\n    private matches(pattern: string): boolean {\n        if (this.isAtEnd()) {\n            return false;\n        } else {\n            if (this.source[this.current] === pattern) {\n                this.col += 1;\n                this.current += 1;\n                return true;\n            }\n            return false;\n        }\n    }\n\n    private isLegalUnicode(c: string): boolean {\n        if (this.isDelimiter(c)) {\n            return false;\n        }\n        return c.length === 1 && !/^\\p{Nd}$/u.test(c);\n    }\n\n    private isAlpha(c: string): boolean {\n        return /^[A-Za-z]$/i.test(c);\n    }\n\n    private isDigit(c: string): boolean {\n        return /^[0-9]/.test(c);\n    }\n\n    private isHexa(c: string): boolean {\n        return /^[0-9A-F]$/i.test(c);\n    }\n\n    private isOcta(c: string): boolean {\n        return /^[0-7]/.test(c);\n    }\n\n    private isBinary(c: string): boolean {\n        return /^[0-1]/.test(c);\n    }\n\n    // TODO: unicode\n    private isIdentifier(c: string): boolean {\n        if (/\\s/.test(c)) {\n            return false;\n        }\n        return c === '_' || this.isAlpha(c) || this.isDigit(c) || this.isLegalUnicode(c);\n    }\n\n    private isDelimiter(c: string): boolean {\n        return /[\\p{P}\\p{S}]/u.test(c);\n    }\n\n    private baseNumber() {\n        switch (this.peek()) {\n            case 'x':\n                this.advance();\n                if (!this.isHexa(this.peek())) {\n                    throw new TokenizerErrors.InvalidNumberError(this.line, this.col, this.source, this.start, this.current);\n                }\n                while (this.isHexa(this.peek())) {\n                    this.advance();\n                }\n                this.addToken(TokenType.BIGINT);\n                break;\n            case 'o':\n                this.advance();\n                if (!this.isOcta(this.peek())) {\n                    throw new TokenizerErrors.InvalidNumberError(this.line, this.col, this.source, this.start, this.current);\n                }\n                while (this.isOcta(this.peek())) {\n                    this.advance();\n                }\n                this.addToken(TokenType.BIGINT);\n                break;\n            case 'b':\n                this.advance();\n                if (!this.isBinary(this.peek())) {\n                    throw new TokenizerErrors.InvalidNumberError(this.line, this.col, this.source, this.start, this.current);\n                }\n                while (this.isBinary(this.peek())) {\n                    this.advance();\n                }\n                this.addToken(TokenType.BIGINT);\n                break;\n            default:\n                while (this.isDigit(this.peek())) {\n                    this.advance();\n                }\n                \n                if (this.peek() !== '.' && this.peek() !== 'e') {\n                    // if ends with j and J then complex number\n                    if (this.peek() === 'j' || this.peek() === 'J') {\n                        this.advance();\n                        this.addToken(TokenType.COMPLEX);\n                        return;\n                    }\n                    \n                    this.addToken(TokenType.BIGINT);\n                    return;\n                }\n                \n                if (this.peek() === '.') {\n                    this.advance();\n                    if (this.peek() === '_') {\n                        // TODO:\n                        // throw new error\n                        throw new Error('_ after .');\n                    }\n                    while (this.isDigit(this.peek())) {\n                        this.advance();\n                    }\n                }\n\n                if (this.peek() === '_') {\n                    this.advance();\n                }\n                \n                if (this.peek() === 'e') {\n                    this.advance();\n                    if (this.peek() === '-') {\n                        this.advance();\n                    }\n                    if (this.peek() === '+') {\n                        this.advance();\n                    }\n                    if (!this.isDigit(this.peek())) {\n                        throw new TokenizerErrors.InvalidNumberError(this.line, this.col, this.source, this.start, this.current);\n                    }\n                    while (this.isDigit(this.peek())) {\n                        this.advance();\n                    }\n                }\n        \n                // if ends with j and J then complex number\n                if (this.peek() === 'j' || this.peek() === 'J') {\n                    this.advance();\n                    this.addToken(TokenType.COMPLEX);\n                } else {\n                    this.addToken(TokenType.NUMBER);\n                }\n        }\n    }\n\n    private number(c: string) {\n        while ((this.isDigit(this.peek()) || this.peek() === '_') && c !== '.') {\n            if (this.peek() === '_') {\n                this.advance();\n                if (!this.isDigit(this.peek())) {\n                    throw new Error(\"Invalid use of underscore in number\");\n                }\n            } else {\n                this.advance();\n            }\n        }\n\n        if (this.peek() !== '.' && this.peek() !== 'e' && c !== '.') {\n            // if ends with j and J then complex number\n            if (this.peek() === 'j' || this.peek() === 'J') {\n                this.advance();\n                this.addToken(TokenType.COMPLEX);\n                return;\n            }\n\n            this.addToken(TokenType.BIGINT);\n            return;\n        }\n\n        // Fractional part\n        if ((this.peek() === '.' && c !== '.') || (this.peek() !== '.' && c === '.')) {\n            this.advance();\n            if (this.peek() === '_') {\n                // TODO:\n                // throw new error\n                throw new Error('_ after .');\n            }\n            while (this.isDigit(this.peek()) || this.peek() === '_') {\n                if (this.peek() === '_') {\n                    this.advance();\n                    if (!this.isDigit(this.peek())) {\n                        throw new Error(\"Invalid use of underscore in number\");\n                    }\n                } else {\n                    this.advance();\n                }\n            }\n        }\n\n        // Exponent part\n        if (this.peek() === 'e') {\n            this.advance();\n            if (this.peek() === '-') {\n                this.advance();\n            }\n            if (this.peek() === '+') {\n                this.advance();\n            }\n            if (!this.isDigit(this.peek())) {\n                throw new TokenizerErrors.InvalidNumberError(this.line, this.col, this.source, this.start, this.current);\n            }\n            while (this.isDigit(this.peek()) || this.peek() === '_') {\n                if (this.peek() === '_') {\n                    this.advance();\n                    if (!this.isDigit(this.peek())) {\n                        throw new Error(\"Invalid use of underscore in number\");\n                    }\n                } else {\n                    this.advance();\n                }\n            }\n        }\n\n        // if ends with j and J then complex number\n        if (this.peek() === 'j' || this.peek() === 'J') {\n            this.advance();\n            this.addToken(TokenType.COMPLEX);\n        } else {\n            this.addToken(TokenType.NUMBER);\n        }\n        //this.addToken(TokenType.NUMBER);\n    }\n\n    private name() {\n        while (this.isIdentifier(this.peek())) {\n            this.advance();\n        }\n        const identifier = this.source.slice(this.start, this.current);\n        if (!!this.forbiddenIdentifiers.get(identifier)) {\n            throw new TokenizerErrors.ForbiddenIdentifierError(this.line, this.col,\n                this.source, this.start);\n        }\n        const specialIdent = this.specialIdentifiers.get(identifier);\n        if (specialIdent !== undefined) {\n            /* Merge multi-token operators, like 'is not', 'not in' */\n            const previousToken = this.tokens[this.tokens.length - 1];\n            switch (specialIdent) {\n                case TokenType.NOT:\n                    if (previousToken && previousToken.type === TokenType.IS) {\n                        this.overwriteToken(TokenType.ISNOT);\n                    } else {\n                        this.addToken(specialIdent);\n                    }\n                    return;\n                case TokenType.IN:\n                    if (previousToken.type === TokenType.NOT) {\n                        this.overwriteToken(TokenType.NOTIN);\n                    } else {\n                        this.addToken(specialIdent);\n                    }\n                    return;\n                default:\n                    this.addToken(specialIdent);\n            }\n        } else {\n            this.addToken(TokenType.NAME);\n        }\n    }\n\n    private scanToken() {\n        const c = this.advance();\n        // KJ: I really hope the JS runtime optimizes this to a jump table...\n        switch (c) {\n            //// SPECIAL MARKERS\n            // Comment -- advance to end of line.\n            case '#':\n                while ((this.peek() !== '\\n' && this.peek() !== '\\r') && !this.isAtEnd()) {\n                    this.advance();\n                }\n                break;\n            case ':':\n                this.addToken(this.matches(':') ? TokenType.DOUBLECOLON : TokenType.COLON);\n                break;\n            // All non-significant whitespace\n            case ' ':\n                break;\n            // CR LF on Windows\n            case '\\r':\n                if (this.matches('\\n')) {\n                    // fall through\n                } else {\n                    break;\n                }\n            case '\\n':\n                if (this.parenthesesLevel > 0) {\n                    this.line += 1;\n                    this.col = 0;\n                    break;\n                }\n                this.addToken(TokenType.NEWLINE);\n                this.line += 1;\n                this.col = 0;\n                let accLeadingWhiteSpace = 0;\n                // Detect significant whitespace\n                while (this.peek() === \" \" && !this.isAtEnd()) {\n                    accLeadingWhiteSpace += 1;\n                    // Consume the rest of the line's leading whitespace.\n                    this.advance();\n                }\n                // Handles comments\n                if (this.peek() === \"#\") {\n                    while ((this.peek() !== '\\n' && this.peek() !== '\\r') && !this.isAtEnd()) {\n                        this.advance();\n                    }\n                }\n                // The following block handles things like\n                /*\n                def foo():\n                    pass\n                             <---- this newline should be zapped\n                    pass     <---- this should be part of the block\n                 */\n                while ((this.peek() === \"\\n\" || this.peek() === \"\\r\") && !this.isAtEnd()) {\n                    // Handle \\r\\n on Windows\n                    if (this.peek() === \"\\r\") {\n                        this.advance();\n                        if (this.peek() === \"\\n\") {\n                            this.advance();\n                        }\n                    } else {\n                        this.advance();\n                    }\n                    this.line += 1;\n                    this.col = 0;\n                    accLeadingWhiteSpace = 0;\n                    // Detect significant whitespace\n                    while (this.peek() === \" \" && !this.isAtEnd()) {\n                        accLeadingWhiteSpace += 1;\n                        // Consume the rest of the line's leading whitespace.\n                        this.advance();\n                    }\n                }\n                if (accLeadingWhiteSpace % 4 !== 0) {\n                    throw new TokenizerErrors.NonFourIndentError(this.line, this.col, this.source, this.current);\n                }\n                const tos = this.indentStack[this.indentStack.length - 1];\n                if (accLeadingWhiteSpace > tos) {\n                    this.indentStack.push(accLeadingWhiteSpace);\n                    const indents = Math.floor((accLeadingWhiteSpace - tos) / 4);\n                    for (let i = 0; i < indents; ++i) {\n                        this.addToken(TokenType.INDENT);\n                    }\n                } else if (accLeadingWhiteSpace < tos) {\n                    if (this.indentStack.length == 0) {\n                        throw new TokenizerErrors.InconsistentIndentError(this.line, this.col, this.source, this.current);\n                    }\n                    const prev = this.indentStack[this.indentStack.length - 1];\n                    if (prev === undefined || prev === null) {\n                        throw new TokenizerErrors.InconsistentIndentError(this.line, this.col, this.source, this.current);\n                    }\n                    const indents = Math.floor((prev - accLeadingWhiteSpace) / 4);\n                    for (let i = 0; i < indents; ++i) {\n                        this.indentStack.pop();\n                        this.addToken(TokenType.DEDENT);\n                    }\n                }\n                break;\n            // String\n            case '\"':\n            case \"'\":\n                let quote = c;\n                if (this.peek() == quote) { // handle multi-line string\n                    this.advance(); // second quote found and consumed\n                    if (this.peek() != quote) { // empty string \"\"\n                        this.addStringToken(TokenType.STRING);\n                        break;\n                    }\n                    this.advance(); // third quote consumed\n                    let quote_sum = 0;\n                    while (true) {\n                        while (this.peek() != quote && !this.isAtEnd()) {\n                            quote_sum = 0;\n                            if (this.peek() === '\\\\') {\n                                this.advanceString(false);\n                                switch(this.peek()) {\n                                    case '\\n':\n                                        break;\n                                    case '\\\\':\n                                        this.addBuffer('\\\\');\n                                        break;\n                                    case '\\'':\n                                        this.addBuffer('\\'');\n                                        break;\n                                    case '\\\"':\n                                        this.addBuffer('\\\"');\n                                        break;\n                                    case 'a':\n                                        this.addBuffer('\\a');\n                                        break;\n                                    case 'b':\n                                        this.addBuffer('\\b');\n                                        break;\n                                    case 'f':\n                                        this.addBuffer('\\f');\n                                        break;\n                                    case 'n':\n                                        this.addBuffer('\\n');\n                                        break;\n                                    case 'r':\n                                        this.addBuffer('\\r');\n                                        break;\n                                    case 't':\n                                        this.addBuffer('\\t');\n                                        break;\n                                    case 'v':\n                                        this.addBuffer('\\v');\n                                        break;\n                                    default:\n                                        throw new Error(\"SyntaxWarning: invalid escape sequence\");\n                                }\n                                this.advanceString(false);\n                            } else {\n                                this.advanceString(true);\n                            }\n                            //this.advance(); // advance until ending quote found\n                        }\n                        if (this.isAtEnd()) {\n                            throw new TokenizerErrors.UnterminatedStringError(this.line,\n                                this.col, this.source, this.start, this.current);\n                        }\n                        if (this.peek() == quote) {\n                            this.advanceString(true);\n                            quote_sum++;\n                        }\n                        //this.advance(); // consume first ending quote\n                        // if (this.peek() != quote) {\n                        //     throw new TokenizerErrors.UnterminatedStringError(this.line,\n                        //         this.col, this.source, this.start, this.current);\n                        // }\n                        // this.advance();\n                        if (quote_sum === 3) {\n                            this.subtractBufferForThreeQuoteString();\n                            // console.info('endof3quote');\n                            // this.getBuffer();\n                            break;\n                        }\n                    }\n                    \n                    // // consume second ending quote\n                    // if (this.peek() != quote) {\n                    //     throw new TokenizerErrors.UnterminatedStringError(this.line,\n                    //         this.col, this.source, this.start, this.current);\n                    // }\n                    // this.advance(); // consume third ending quote\n                    this.addMultiLineStringToken(TokenType.STRING);\n                } else { // other case, single-line string\n                    while (this.peek() !== quote && this.peek() !== '\\n' && !this.isAtEnd()) {\n                        if (this.peek() === '\\\\') {\n                            this.advanceString(false);\n                            switch(this.peek()) {\n                                case '\\n':\n                                    break;\n                                case '\\\\':\n                                    this.addBuffer('\\\\');\n                                    break;\n                                case '\\'':\n                                    this.addBuffer('\\'');\n                                    break;\n                                case '\\\"':\n                                    this.addBuffer('\\\"');\n                                    break;\n                                case 'a':\n                                    this.addBuffer('\\a');\n                                    break;\n                                case 'b':\n                                    this.addBuffer('\\b');\n                                    break;\n                                case 'f':\n                                    this.addBuffer('\\f');\n                                    break;\n                                case 'n':\n                                    this.addBuffer('\\n');\n                                    break;\n                                case 'r':\n                                    this.addBuffer('\\r');\n                                    break;\n                                case 't':\n                                    this.addBuffer('\\t');\n                                    break;\n                                case 'v':\n                                    this.addBuffer('\\v');\n                                    break;\n                                default:\n                                    throw new Error(\"SyntaxWarning: invalid escape sequence\");\n                            }\n                            this.advanceString(false);\n                        } else {\n                            this.advanceString(true);\n                        }\n                    }\n                    // should look for \\\\\n                    if (this.peek() === '\\n' || this.isAtEnd()) {\n                        throw new TokenizerErrors.UnterminatedStringError(this.line, this.col, this.source, this.start, this.current);\n                    }\n                    // Consume Closing \"\n                    this.advance();\n                    this.addStringToken(TokenType.STRING);\n                }\n                break;\n            // Number... I wish JS had match statements :(\n            case '0':\n                this.baseNumber();\n                break;\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case '.':\n                this.number(c);\n                break;\n            //// Everything else\n            case '(':\n                this.addToken(TokenType.LPAR);\n                this.parenthesesLevel++;\n                break;\n            case ')':\n                this.addToken(TokenType.RPAR);\n                if (this.parenthesesLevel === 0) {\n                    throw new TokenizerErrors.NonMatchingParenthesesError(this.line, this.col, this.source, this.current);\n                }\n                this.parenthesesLevel--;\n                break;\n            case ',':\n                this.addToken(TokenType.COMMA);\n                break;\n            //// OPERATORS\n            case '-':\n                if (this.matches('=')) {\n                    this.raiseForbiddenOperator();\n                }\n                this.addToken(TokenType.MINUS);\n                break;\n            case '+':\n                if (this.matches('=')) {\n                    this.raiseForbiddenOperator();\n                }\n                this.addToken(TokenType.PLUS);\n                break;\n            case '*':\n                if (this.matches('=')) {\n                    this.raiseForbiddenOperator();\n                }\n                this.addToken(this.matches('*') ? TokenType.DOUBLESTAR : TokenType.STAR);\n                break;\n            case '/':\n                if (this.matches('=')) {\n                    this.raiseForbiddenOperator();\n                }\n                this.addToken(this.matches('/') ? TokenType.DOUBLESLASH : TokenType.SLASH);\n                break;\n            case '%':\n                if (this.matches('=')) {\n                    this.raiseForbiddenOperator();\n                }\n                this.addToken(TokenType.PERCENT);\n                break;\n            case '!':\n                this.addToken(this.matches('=') ? TokenType.NOTEQUAL : TokenType.BANG);\n                break;\n            case '=':\n                this.addToken(this.matches('=') ? TokenType.DOUBLEEQUAL : TokenType.EQUAL);\n                break;\n            case '<':\n                this.addToken(this.matches('=') ? TokenType.LESSEQUAL : TokenType.LESS);\n                break;\n            case '>':\n                this.addToken(this.matches('=') ? TokenType.GREATEREQUAL : TokenType.GREATER);\n                break;\n            default:\n                // Identifier start\n                // TODO: unicode\n                if (c === '_' || this.isAlpha(c) || this.isLegalUnicode(c)) {\n                    this.name();\n                    break;\n                }\n                this.matchForbiddenOperator(c);\n                throw new TokenizerErrors.UnknownTokenError(c, this.line, this.col, this.source, this.current);\n        }\n    }\n\n    private matchForbiddenOperator(ch: string) {\n        switch (ch) {\n            case '@':\n            case '|':\n            case '&':\n            case '~':\n            case '^':\n                this.matches('=');\n                this.raiseForbiddenOperator();\n                break;\n            default:\n                break;\n        }\n    }\n\n    scanEverything(): Token[] {\n        while (!this.isAtEnd()) {\n            this.start = this.current;\n            this.scanToken();\n        }\n        // Unravel the indent stack\n        while (this.indentStack[this.indentStack.length - 1] !== 0) {\n            this.indentStack.pop();\n            this.addToken(TokenType.DEDENT);\n        }\n        this.tokens.push(new Token(TokenType.ENDMARKER, \"\", this.line, this.col, this.current));\n        return this.tokens\n    }\n\n    printTokens() {\n        for (const token of this.tokens) {\n            console.log(`${token.indexInSource}:${token.line}-${token.line},${token.indexInSource + token.lexeme.length}\\t\\t\\t\\\n            ${TokenType[token.type]}\\t\\t\\t'${token.lexeme}'`);\n        }\n    }\n\n    private raiseForbiddenOperator() {\n        throw new TokenizerErrors.ForbiddenOperatorError(this.line, this.col, this.source, this.start, this.current);\n    }\n}\n\n","// This file is autogenerated by generate-ast.ts. DO NOT EDIT THIS FILE DIRECTLY.\nimport {Token} from \"./tokenizer\";\nimport { PyComplexNumber } from \"./types\";\n\nexport namespace ExprNS {\n    export interface Visitor<T> {\n        visitBigIntLiteralExpr(expr: BigIntLiteral): T\n        visitBinaryExpr(expr: Binary): T\n        visitCompareExpr(expr: Compare): T\n        visitBoolOpExpr(expr: BoolOp): T\n        visitGroupingExpr(expr: Grouping): T\n        visitLiteralExpr(expr: Literal): T\n        visitUnaryExpr(expr: Unary): T\n        visitTernaryExpr(expr: Ternary): T\n        visitLambdaExpr(expr: Lambda): T\n        visitMultiLambdaExpr(expr: MultiLambda): T\n        visitVariableExpr(expr: Variable): T\n        visitCallExpr(expr: Call): T\n        visitComplexExpr(expr: Complex): T\n        visitNoneExpr(expr: None): T\n    }\n    export abstract class Expr {\n        startToken: Token;\n        endToken: Token;\n        protected constructor(startToken: Token, endToken: Token) {\n            this.startToken = startToken;\n            this.endToken = endToken;\n        }\n        abstract accept(visitor: Visitor<any>): any;\n    }\n    export class None extends Expr { \n        constructor(startToken: Token, endToken: Token, value: string = \"None\") {\n            super(startToken, endToken);\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitNoneExpr(this);\n        }\n    }\n    export class BigIntLiteral extends Expr {\n        value: string;\n        constructor(startToken: Token, endToken: Token, value: string){\n            super(startToken, endToken)\n            this.value = value;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitBigIntLiteralExpr(this)\n        }\n    }\n    export class Complex extends Expr {\n        value: PyComplexNumber;\n        constructor(startToken: Token, endToken: Token, value: string) {\n            super(startToken, endToken);\n            this.value = PyComplexNumber.fromString(value);;\n        }\n        override accept<T>(visitor: Visitor<T>): T {\n            return visitor.visitComplexExpr(this);\n        }\n    }\n    export class Binary extends Expr {\n        left: Expr;\n        operator: Token;\n        right: Expr;\n        constructor(startToken: Token, endToken: Token, left: Expr, operator: Token, right: Expr){\n            super(startToken, endToken)\n            this.left = left;\n            this.operator = operator;\n            this.right = right;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitBinaryExpr(this)\n        }\n    }\n    export class Compare extends Expr {\n        left: Expr;\n        operator: Token;\n        right: Expr;\n        constructor(startToken: Token, endToken: Token, left: Expr, operator: Token, right: Expr){\n            super(startToken, endToken)\n            this.left = left;\n            this.operator = operator;\n            this.right = right;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitCompareExpr(this)\n        }\n    }\n    export class BoolOp extends Expr {\n        left: Expr;\n        operator: Token;\n        right: Expr;\n        constructor(startToken: Token, endToken: Token, left: Expr, operator: Token, right: Expr){\n            super(startToken, endToken)\n            this.left = left;\n            this.operator = operator;\n            this.right = right;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitBoolOpExpr(this)\n        }\n    }\n    export class Grouping extends Expr {\n        expression: Expr;\n        constructor(startToken: Token, endToken: Token, expression: Expr){\n            super(startToken, endToken)\n            this.expression = expression;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitGroupingExpr(this)\n        }\n    }\n    export class Literal extends Expr {\n        value: true | false | number | string;\n        constructor(startToken: Token, endToken: Token, value: true | false | number | string){\n            super(startToken, endToken)\n            this.value = value;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitLiteralExpr(this)\n        }\n    }\n    export class Unary extends Expr {\n        operator: Token;\n        right: Expr;\n        constructor(startToken: Token, endToken: Token, operator: Token, right: Expr){\n            super(startToken, endToken)\n            this.operator = operator;\n            this.right = right;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitUnaryExpr(this)\n        }\n    }\n    export class Ternary extends Expr {\n        predicate: Expr;\n        consequent: Expr;\n        alternative: Expr;\n        constructor(startToken: Token, endToken: Token, predicate: Expr, consequent: Expr, alternative: Expr){\n            super(startToken, endToken)\n            this.predicate = predicate;\n            this.consequent = consequent;\n            this.alternative = alternative;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitTernaryExpr(this)\n        }\n    }\n    export class Lambda extends Expr {\n        parameters: Token[];\n        body: Expr;\n        constructor(startToken: Token, endToken: Token, parameters: Token[], body: Expr){\n            super(startToken, endToken)\n            this.parameters = parameters;\n            this.body = body;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitLambdaExpr(this)\n        }\n    }\n    export class MultiLambda extends Expr {\n        parameters: Token[];\n        body: StmtNS.Stmt[];\n        varDecls: Token[];\n        constructor(startToken: Token, endToken: Token, parameters: Token[], body: StmtNS.Stmt[], varDecls: Token[]){\n            super(startToken, endToken)\n            this.parameters = parameters;\n            this.body = body;\n            this.varDecls = varDecls;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitMultiLambdaExpr(this)\n        }\n    }\n    export class Variable extends Expr {\n        name: Token;\n        constructor(startToken: Token, endToken: Token, name: Token){\n            super(startToken, endToken)\n            this.name = name;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitVariableExpr(this)\n        }\n    }\n    export class Call extends Expr {\n        callee: Expr;\n        args: Expr[];\n        constructor(startToken: Token, endToken: Token, callee: Expr, args: Expr[]){\n            super(startToken, endToken)\n            this.callee = callee;\n            this.args = args;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitCallExpr(this)\n        }\n    }\n    \n    \n}\nexport namespace StmtNS {\n    export interface Visitor<T> {\n        visitIndentCreation(stmt: Indent): T\n        visitDedentCreation(stmt: Dedent): T\n        visitPassStmt(stmt: Pass): T\n        visitAssignStmt(stmt: Assign): T\n        visitAnnAssignStmt(stmt: AnnAssign): T\n        visitBreakStmt(stmt: Break): T\n        visitContinueStmt(stmt: Continue): T\n        visitReturnStmt(stmt: Return): T\n        visitFromImportStmt(stmt: FromImport): T\n        visitGlobalStmt(stmt: Global): T\n        visitNonLocalStmt(stmt: NonLocal): T\n        visitAssertStmt(stmt: Assert): T\n        visitIfStmt(stmt: If): T\n        visitWhileStmt(stmt: While): T\n        visitForStmt(stmt: For): T\n        visitFunctionDefStmt(stmt: FunctionDef): T\n        visitSimpleExprStmt(stmt: SimpleExpr): T\n        visitFileInputStmt(stmt: FileInput): T\n    }\n    export abstract class Stmt {\n        startToken: Token;\n        endToken: Token;\n        protected constructor(startToken: Token, endToken: Token) {\n            this.startToken = startToken;\n            this.endToken = endToken;\n        }\n        abstract accept(visitor: Visitor<any>): any;\n    }\n    export class Indent extends Stmt {\n        constructor(startToken: Token, endToken: Token){\n            super(startToken, endToken)\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitIndentCreation(this)\n        }\n    }\n    export class Dedent extends Stmt {\n        constructor(startToken: Token, endToken: Token){\n            super(startToken, endToken)\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitDedentCreation(this)\n        }\n    }\n    export class Pass extends Stmt {\n        constructor(startToken: Token, endToken: Token){\n            super(startToken, endToken)\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitPassStmt(this)\n        }\n    }\n    export class Assign extends Stmt {\n        name: Token;\n        value: ExprNS.Expr;\n        constructor(startToken: Token, endToken: Token, name: Token, value: ExprNS.Expr){\n            super(startToken, endToken)\n            this.name = name;\n            this.value = value;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitAssignStmt(this)\n        }\n    }\n    export class AnnAssign extends Stmt {\n        name: Token;\n        value: ExprNS.Expr;\n        ann: ExprNS.Expr;\n        constructor(startToken: Token, endToken: Token, name: Token, value: ExprNS.Expr, ann: ExprNS.Expr){\n            super(startToken, endToken)\n            this.name = name;\n            this.value = value;\n            this.ann = ann;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitAnnAssignStmt(this)\n        }\n    }\n    export class Break extends Stmt {\n        constructor(startToken: Token, endToken: Token){\n            super(startToken, endToken)\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitBreakStmt(this)\n        }\n    }\n    export class Continue extends Stmt {\n        constructor(startToken: Token, endToken: Token){\n            super(startToken, endToken)\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitContinueStmt(this)\n        }\n    }\n    export class Return extends Stmt {\n        value: ExprNS.Expr | null;\n        constructor(startToken: Token, endToken: Token, value: ExprNS.Expr | null){\n            super(startToken, endToken)\n            this.value = value;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitReturnStmt(this)\n        }\n    }\n    export class FromImport extends Stmt {\n        module: Token;\n        names: Token[];\n        constructor(startToken: Token, endToken: Token, module: Token, names: Token[]){\n            super(startToken, endToken)\n            this.module = module;\n            this.names = names;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitFromImportStmt(this)\n        }\n    }\n    export class Global extends Stmt {\n        name: Token;\n        constructor(startToken: Token, endToken: Token, name: Token){\n            super(startToken, endToken)\n            this.name = name;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitGlobalStmt(this)\n        }\n    }\n    export class NonLocal extends Stmt {\n        name: Token;\n        constructor(startToken: Token, endToken: Token, name: Token){\n            super(startToken, endToken)\n            this.name = name;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitNonLocalStmt(this)\n        }\n    }\n    export class Assert extends Stmt {\n        value: ExprNS.Expr;\n        constructor(startToken: Token, endToken: Token, value: ExprNS.Expr){\n            super(startToken, endToken)\n            this.value = value;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitAssertStmt(this)\n        }\n    }\n    export class If extends Stmt {\n        condition: ExprNS.Expr;\n        body: Stmt[];\n        elseBlock: Stmt[] | null;\n        constructor(startToken: Token, endToken: Token, condition: ExprNS.Expr, body: Stmt[], elseBlock: Stmt[] | null){\n            super(startToken, endToken)\n            this.condition = condition;\n            this.body = body;\n            this.elseBlock = elseBlock;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitIfStmt(this)\n        }\n    }\n    export class While extends Stmt {\n        condition: ExprNS.Expr;\n        body: Stmt[];\n        constructor(startToken: Token, endToken: Token, condition: ExprNS.Expr, body: Stmt[]){\n            super(startToken, endToken)\n            this.condition = condition;\n            this.body = body;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitWhileStmt(this)\n        }\n    }\n    export class For extends Stmt {\n        target: Token;\n        iter: ExprNS.Expr;\n        body: Stmt[];\n        constructor(startToken: Token, endToken: Token, target: Token, iter: ExprNS.Expr, body: Stmt[]){\n            super(startToken, endToken)\n            this.target = target;\n            this.iter = iter;\n            this.body = body;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitForStmt(this)\n        }\n    }\n    export class FunctionDef extends Stmt {\n        name: Token;\n        parameters: Token[];\n        body: Stmt[];\n        varDecls: Token[];\n        constructor(startToken: Token, endToken: Token, name: Token, parameters: Token[], body: Stmt[], varDecls: Token[]){\n            super(startToken, endToken)\n            this.name = name;\n            this.parameters = parameters;\n            this.body = body;\n            this.varDecls = varDecls;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitFunctionDefStmt(this)\n        }\n    }\n    export class SimpleExpr extends Stmt {\n        expression: ExprNS.Expr;\n        constructor(startToken: Token, endToken: Token, expression: ExprNS.Expr){\n            super(startToken, endToken)\n            this.expression = expression;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitSimpleExprStmt(this)\n        }\n    }\n    export class FileInput extends Stmt {\n        statements: Stmt[];\n        varDecls: Token[];\n        constructor(startToken: Token, endToken: Token, statements: Stmt[], varDecls: Token[]){\n            super(startToken, endToken)\n            this.statements = statements;\n            this.varDecls = varDecls;\n        }\n        override accept(visitor: Visitor<any>): any {\n            return visitor.visitFileInputStmt(this)\n        }\n    }\n    \n    \n}\n","/*\n* Full disclosure: some of the functions and general layout of the file is\n* from my own implementation of a parser\n* in Rust.\n* https://github.com/Fidget-Spinner/crafting_interpreters/blob/main/rust/src/parser.rs\n*\n* That is in turn an implementation of the book \"Crafting Interpreters\" by\n* Robert Nystrom, which implements an interpreter in Java.\n* https://craftinginterpreters.com/parsing-expressions.html.\n* I've included the MIT license that code snippets from\n* the book is licensed under down below. See\n* https://github.com/munificent/craftinginterpreters/blob/master/LICENSE\n*\n*\n* My changes:\n*   - The book was written in Java. I have written this in TypeScript.\n*   - My Rust implementation uses pattern matching, but the visitor pattern is\n*     used here.\n*   - Additionally, the production rules are completely different\n*     from the book as a whole different language is being parsed.\n*\n*\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to\n    deal in the Software without restriction, including without limitation the\n    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n    sell copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n    IN THE SOFTWARE.\n**/\n\nimport { SPECIAL_IDENTIFIER_TOKENS, Token } from \"./tokenizer\";\nimport { TokenType } from \"./tokens\";\nimport { ExprNS, StmtNS } from \"./ast-types\";\nimport { ParserErrors } from \"./errors\";\n\ntype Expr = ExprNS.Expr;\ntype Stmt = StmtNS.Stmt;\n\nconst PSEUD_NAMES = [\n    TokenType.TRUE,\n    TokenType.FALSE,\n    TokenType.NONE,\n]\n\nexport class Parser {\n    private readonly source: string;\n    private readonly tokens: Token[];\n    private current: number;\n\n    constructor(source: string, tokens: Token[]) {\n        this.source = source;\n        this.tokens = tokens;\n        this.current = 0;\n    }\n\n    // Consumes tokens while tokenTypes matches.\n    private match(...tokenTypes: TokenType[]): boolean {\n        for (const tokenType of tokenTypes) {\n            if (this.check(tokenType)) {\n                this.advance();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private check(...type: TokenType[]): boolean {\n        if (this.isAtEnd()) {\n            return false;\n        }\n        for (const tokenType of type) {\n            if (this.peek().type === tokenType) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private advance(): Token {\n        if (!this.isAtEnd()) {\n            this.current += 1;\n        }\n        return this.previous();\n    }\n\n    private isAtEnd(): boolean {\n        return this.peek().type === TokenType.ENDMARKER;\n    }\n\n\n    private peek(): Token {\n        return this.tokens[this.current];\n    }\n\n    private previous(): Token {\n        return this.tokens[this.current - 1];\n    }\n\n    private consume(type: TokenType, message: string): Token {\n        if (this.check(type)) return this.advance();\n        const token = this.tokens[this.current];\n        throw new ParserErrors.ExpectedTokenError(this.source, token, message);\n    }\n\n    private synchronize() {\n        this.advance();\n        while (!this.isAtEnd()) {\n            if (this.match(TokenType.NEWLINE)) {\n                return false;\n            }\n            if (this.match(TokenType.FOR,\n                TokenType.WHILE, TokenType.DEF,\n                TokenType.IF, TokenType.ELIF,\n                TokenType.ELSE, TokenType.RETURN)) {\n                return true;\n            }\n            this.advance();\n        }\n        return false;\n    }\n\n    parse(): Stmt {\n        return this.file_input();\n        // return this.expression();\n    }\n\n    //// THE NAMES OF THE FOLLOWING FUNCTIONS FOLLOW THE PRODUCTION RULES IN THE GRAMMAR.\n    //// HENCE THEIR NAMES MIGHT NOT BE COMPLIANT WITH CAMELCASE\n    private file_input(): Stmt {\n        const startToken = this.peek();\n        const statements: Stmt[] = [];\n        while (!this.isAtEnd()) {\n            if (this.match(TokenType.NEWLINE) || this.match(TokenType.DEDENT)) {\n                continue;\n            }\n            statements.push(this.stmt());\n        }\n        const endToken = this.peek();\n        return new StmtNS.FileInput(startToken, endToken, statements, []);\n    }\n\n    private stmt(): Stmt {\n        if (this.check(TokenType.DEF, TokenType.FOR, TokenType.IF, TokenType.WHILE)) {\n            return this.compound_stmt();\n        } else if (this.check(TokenType.NAME, ...PSEUD_NAMES, TokenType.NUMBER,\n            TokenType.PASS, TokenType.BREAK, TokenType.CONTINUE, TokenType.MINUS, TokenType.PLUS, TokenType.INDENT, TokenType.DEDENT,\n            TokenType.RETURN, TokenType.FROM, TokenType.GLOBAL, TokenType.NONLOCAL,\n            TokenType.ASSERT, TokenType.LPAR, TokenType.STRING, TokenType.BIGINT, ...SPECIAL_IDENTIFIER_TOKENS)) {\n            return this.simple_stmt();\n        }\n        const startToken = this.peek();\n        const endToken = this.synchronize() ? this.previous() : this.peek();\n        try {\n            this.parse_invalid(startToken, endToken);\n        } catch (e) {\n            if (e instanceof ParserErrors.BaseParserError) {\n                throw (e)\n            }\n        }\n        throw new ParserErrors.GenericUnexpectedSyntaxError(startToken.line, startToken.col, this.source,\n            startToken.indexInSource, endToken.indexInSource);\n    }\n\n    private compound_stmt(): Stmt {\n        if (this.match(TokenType.IF)) {\n            return this.if_stmt();\n        } else if (this.match(TokenType.WHILE)) {\n            return this.while_stmt();\n        } else if (this.match(TokenType.FOR)) {\n            return this.for_stmt();\n        } else if (this.match(TokenType.DEF)) {\n            return this.funcdef();\n        }\n        throw new Error(\"Unreachable code path\");\n    }\n\n    private if_stmt(): Stmt {\n        const startToken = this.previous();\n        let start = this.previous();\n        let cond = this.test();\n        this.consume(TokenType.COLON, \"Expected ':' after if\");\n        let block = this.suite();\n        let elseStmt = null;\n        if (this.match(TokenType.ELIF)) {\n            elseStmt = [this.if_stmt()];\n        } else if (this.match(TokenType.ELSE)) {\n            this.consume(TokenType.COLON, \"Expect ':' after else\");\n            elseStmt = this.suite();\n        } else {\n            throw new ParserErrors.NoElseBlockError(this.source, start);\n        }\n        const endToken = this.previous();\n        return new StmtNS.If(startToken, endToken, cond, block, elseStmt);\n    }\n\n    private while_stmt(): Stmt {\n        const startToken = this.peek();\n        let cond = this.test();\n        this.consume(TokenType.COLON, \"Expected ':' after while\");\n        let block = this.suite();\n        const endToken = this.previous();\n        return new StmtNS.While(startToken, endToken, cond, block);\n    }\n\n    private for_stmt(): Stmt {\n        const startToken = this.peek();\n        let target = this.advance();\n        this.consume(TokenType.IN, \"Expected in after for\");\n        let iter = this.test();\n        this.consume(TokenType.COLON, \"Expected ':' after for\");\n        let block = this.suite();\n        const endToken = this.previous();\n        return new StmtNS.For(startToken, endToken, target, iter, block);\n    }\n\n    private funcdef(): Stmt {\n        const startToken = this.peek();\n        let name = this.advance();\n        let args = this.parameters();\n        this.consume(TokenType.COLON, \"Expected ':' after def\");\n        let block = this.suite();\n        const endToken = this.previous();\n        return new StmtNS.FunctionDef(startToken, endToken, name, args, block, []);\n    }\n\n    private simple_stmt(): Stmt {\n        const startToken = this.peek();\n        let res = null;\n        if (this.match(TokenType.NAME)) {\n            res = this.assign_stmt();\n        } else if (this.match(TokenType.INDENT)) {\n            res = new StmtNS.Indent(startToken, startToken);\n        } else if (this.match(TokenType.DEDENT)) {\n            res = new StmtNS.Dedent(startToken, startToken);\n        } else if (this.match(TokenType.PASS)) {\n            res = new StmtNS.Pass(startToken, startToken);\n        } else if (this.match(TokenType.BREAK)) {\n            res = new StmtNS.Break(startToken, startToken);\n        } else if (this.match(TokenType.CONTINUE)) {\n            res = new StmtNS.Continue(startToken, startToken);\n        } else if (this.match(TokenType.RETURN)) {\n            res = new StmtNS.Return(startToken, startToken, this.check(TokenType.NEWLINE) ? null : this.test());\n        } else if (this.match(TokenType.FROM)) {\n            res = this.import_from();\n        } else if (this.match(TokenType.GLOBAL)) {\n            res = new StmtNS.Global(startToken, startToken, this.advance());\n        } else if (this.match(TokenType.NONLOCAL)) {\n            res = new StmtNS.NonLocal(startToken, startToken, this.advance());\n        } else if (this.match(TokenType.ASSERT)) {\n            res = new StmtNS.Assert(startToken, startToken, this.test());\n        } else if (this.check(TokenType.LPAR, TokenType.NUMBER, TokenType.STRING,\n            TokenType.BIGINT, TokenType.MINUS, TokenType.PLUS, ...SPECIAL_IDENTIFIER_TOKENS)) {\n            res = new StmtNS.SimpleExpr(startToken, startToken, this.test());\n        } else {\n            throw new Error(\"Unreachable code path\");\n        }\n        this.consume(TokenType.NEWLINE, \"Expected newline\");\n        return res;\n    }\n\n    private assign_stmt(): Stmt {\n        const startToken = this.previous();\n        const name = this.previous();\n        if (this.check(TokenType.COLON)) {\n            const ann = this.test();\n            this.consume(TokenType.EQUAL, \"Expect equal in assignment\");\n            const expr = this.test();\n            return new StmtNS.AnnAssign(startToken, this.previous(), name, expr, ann);\n        } else if (this.check(TokenType.EQUAL)) {\n            this.advance();\n            const expr = this.test();\n            return new StmtNS.Assign(startToken, this.previous(), name, expr);\n        } else {\n            this.current--;\n            const expr = this.test();\n            return new StmtNS.SimpleExpr(startToken, this.previous(), expr);\n        }\n    }\n\n    private import_from(): Stmt {\n        const startToken = this.previous();\n        const module = this.advance();\n        this.consume(TokenType.IMPORT, \"Expected import keyword\");\n        let params;\n        if (this.check(TokenType.NAME)) {\n            params = [this.advance()];\n        } else {\n            params = this.parameters();\n        }\n        return new StmtNS.FromImport(startToken, this.previous(), module, params);\n    }\n\n    private parameters(): Token[] {\n        this.consume(TokenType.LPAR, \"Expected opening parentheses\");\n        let res = this.varparamslist();\n        this.consume(TokenType.RPAR, \"Expected closing parentheses\");\n        return res;\n    }\n\n    private test(): Expr {\n        if (this.match(TokenType.LAMBDA)) {\n            return this.lambdef();\n        } else {\n            const startToken = this.peek();\n            let consequent = this.or_test();\n            if (this.match(TokenType.IF)) {\n                const predicate = this.or_test();\n                this.consume(TokenType.ELSE, \"Expected else\")\n                const alternative = this.test();\n                return new ExprNS.Ternary(startToken, this.previous(), predicate, consequent, alternative);\n            }\n            return consequent;\n        }\n    }\n\n    private lambdef(): Expr {\n        const startToken = this.previous();\n        let args = this.varparamslist();\n        if (this.match(TokenType.COLON)) {\n            let test = this.test();\n            return new ExprNS.Lambda(startToken, this.previous(), args, test);\n        } else if (this.match(TokenType.DOUBLECOLON)) {\n            let block = this.suite();\n            return new ExprNS.MultiLambda(startToken, this.previous(), args, block, []);\n        }\n        this.consume(TokenType.COLON, \"Expected ':' after lambda\");\n        throw new Error(\"unreachable code path\");\n    }\n\n    private suite(): Stmt[] {\n        let stmts = [];\n        if (this.match(TokenType.NEWLINE)) {\n            this.consume(TokenType.INDENT, \"Expected indent\");\n            while (!this.match(TokenType.DEDENT)) {\n                stmts.push(this.stmt());\n            }\n        }\n        return stmts;\n    }\n\n    private varparamslist(): Token[] {\n        let params = [];\n        while (!this.check(TokenType.COLON) && !this.check(TokenType.RPAR)) {\n            let name = this.consume(TokenType.NAME, \"Expected a proper identifier in parameter\");\n            params.push(name);\n            if (!this.match(TokenType.COMMA)) {\n                break;\n            }\n        }\n        return params;\n    }\n\n    private or_test(): Expr {\n        const startToken = this.peek();\n        let expr = this.and_test();\n        while (this.match(TokenType.OR)) {\n            const operator = this.previous();\n            const right = this.and_test();\n            expr = new ExprNS.BoolOp(startToken, this.previous(), expr, operator, right);\n        }\n        return expr;\n    }\n\n    private and_test(): Expr {\n        const startToken = this.peek();\n        let expr = this.not_test();\n        while (this.match(TokenType.AND)) {\n            const operator = this.previous();\n            const right = this.not_test();\n            expr = new ExprNS.BoolOp(startToken, this.previous(), expr, operator, right);\n        }\n        return expr;\n    }\n\n    private not_test(): Expr {\n        const startToken = this.peek();\n        if (this.match(TokenType.NOT, TokenType.BANG)) {\n            const operator = this.previous();\n            return new ExprNS.Unary(startToken, this.previous(), operator, this.not_test());\n        }\n        return this.comparison();\n    }\n\n    private comparison(): Expr {\n        const startToken = this.peek();\n        let expr = this.arith_expr();\n        // @TODO: Add the rest of the comparisons\n        while (this.match(\n            TokenType.LESS,\n            TokenType.GREATER,\n            TokenType.DOUBLEEQUAL,\n            TokenType.GREATEREQUAL,\n            TokenType.LESSEQUAL,\n            TokenType.NOTEQUAL,\n            TokenType.IS,\n            TokenType.ISNOT,\n            TokenType.IN,\n            TokenType.NOTIN,\n        )) {\n            const operator = this.previous();\n            const right = this.arith_expr();\n            expr = new ExprNS.Compare(startToken, this.previous(), expr, operator, right);\n        }\n        return expr;\n    }\n\n    private arith_expr(): Expr {\n        const startToken = this.peek();\n        let expr = this.term();\n        while (this.match(TokenType.PLUS, TokenType.MINUS)) {\n            const token = this.previous();\n            const right = this.term();\n            expr = new ExprNS.Binary(startToken, this.previous(), expr, token, right);\n        }\n        return expr;\n    }\n\n    private term(): Expr {\n        const startToken = this.peek();\n        let expr = this.factor();\n        while (this.match(TokenType.STAR, TokenType.SLASH, TokenType.PERCENT, TokenType.DOUBLESLASH)) {\n            const token = this.previous();\n            const right = this.factor();\n            expr = new ExprNS.Binary(startToken, this.previous(), expr, token, right);\n        }\n        return expr;\n    }\n\n    private factor(): Expr {\n        const startToken = this.peek();\n        if (this.match(TokenType.PLUS, TokenType.MINUS)) {\n            const op = this.previous();\n            const factor = this.factor();\n            const endToken = this.previous();\n            return new ExprNS.Unary(startToken, endToken, op, factor);\n        }\n        return this.power();\n    }\n\n    private power(): Expr {\n        const startToken = this.peek();\n        let expr = this.atom_expr();\n        if (this.match(TokenType.DOUBLESTAR)) {\n            const token = this.previous();\n            const right = this.factor();\n            const endToken = this.previous();\n            return new ExprNS.Binary(startToken, endToken, expr, token, right);\n        }\n        return expr;\n    }\n\n\n    private atom_expr(): Expr {\n        let startToken = this.peek();\n        let ato = this.atom();\n        let res;\n        if (this.match(TokenType.LPAR)) {\n            let args = this.arglist();\n            const endToken = this.previous();\n            res = new ExprNS.Call(startToken, endToken, ato, args);\n        } else {\n            return ato;\n        }\n        // To handle things like x()()()\n        startToken = this.peek();\n        while (this.match(TokenType.LPAR)) {\n            let args = this.arglist();\n            res = new ExprNS.Call(startToken, this.previous(), res, args);\n            startToken = this.peek();\n        }\n        return res;\n    }\n\n    private arglist(): Expr[] {\n        let args = [];\n        while (!this.check(TokenType.RPAR)) {\n            let arg = this.test();\n            args.push(arg);\n            if (!this.match(TokenType.COMMA)) {\n                break;\n            }\n        }\n        this.consume(TokenType.RPAR, \"Expected closing ')' after function application\");\n        return args;\n    }\n\n    private atom(): Expr {\n        const startToken = this.peek();\n        if (this.match(TokenType.TRUE)) return new ExprNS.Literal(startToken, this.previous(), true);\n        if (this.match(TokenType.FALSE)) return new ExprNS.Literal(startToken, this.previous(), false);\n        if (this.match(TokenType.NONE)) return new ExprNS.None(startToken, this.previous());\n        if (this.match(TokenType.STRING)) {\n            return new ExprNS.Literal(startToken, this.previous(), this.previous().lexeme);\n        }\n        if (this.match(TokenType.NUMBER)) {\n            return new ExprNS.Literal(startToken, this.previous(), Number(this.previous().lexeme.replace(/_/g, \"\")));\n        }\n        if (this.match(TokenType.BIGINT)) {\n            return new ExprNS.BigIntLiteral(startToken, this.previous(), this.previous().lexeme);\n        }\n        if (this.match(TokenType.COMPLEX)) {\n            return new ExprNS.Complex(startToken, this.previous(), this.previous().lexeme);\n        }\n\n        if (this.match(TokenType.NAME, ...PSEUD_NAMES)) {\n            return new ExprNS.Variable(startToken, this.previous(), this.previous());\n        }\n\n        if (this.match(TokenType.LPAR)) {\n            let expr = this.test();\n            this.consume(TokenType.RPAR, \"Expected closing ')'\");\n            return new ExprNS.Grouping(startToken, this.previous(), expr);\n        }\n        const startTokenInvalid = this.peek();\n        this.synchronize();\n        const endTokenInvalid = this.peek();\n        throw new ParserErrors.GenericUnexpectedSyntaxError(startToken.line, startToken.col, this.source,\n            startTokenInvalid.indexInSource, endTokenInvalid.indexInSource);\n    }\n\n    //// INVALID RULES\n    private parse_invalid(startToken: Token, endToken: Token) {\n        // @TODO invalid rules\n\n    }\n}\n\n","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","(function() {\n  'use strict';\n  \n  var collator;\n  try {\n    collator = (typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\") ? Intl.Collator(\"generic\", { sensitivity: \"base\" }) : null;\n  } catch (err){\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n\n  var levenshtein = require('fastest-levenshtein');\n\n  // arrays to re-use\n  var prevRow = [],\n    str2Char = [];\n  \n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function(str1, str2, options) {\n      var useCollator = (options && collator && options.useCollator);\n      \n      if (useCollator) {\n        var str1Len = str1.length,\n          str2Len = str2.length;\n        \n        // base cases\n        if (str1Len === 0) return str2Len;\n        if (str2Len === 0) return str1Len;\n\n        // two rows\n        var curCol, nextCol, i, j, tmp;\n\n        // initialise previous row\n        for (i=0; i<str2Len; ++i) {\n          prevRow[i] = i;\n          str2Char[i] = str2.charCodeAt(i);\n        }\n        prevRow[str2Len] = str2Len;\n\n        var strCmp;\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n        return nextCol;\n      }\n      return levenshtein.distance(str1, str2);\n    }\n\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function() {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n    module.exports = Levenshtein;\n  }\n  // web worker\n  else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n    self.Levenshtein = Levenshtein;\n  }\n  // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n}());\n","import { StmtNS, ExprNS } from \"./ast-types\";\ntype Expr = ExprNS.Expr;\ntype Stmt = StmtNS.Stmt;\nimport { Token } from \"./tokenizer\";\nimport { TokenType } from \"./tokens\";\nimport { ResolverErrors } from \"./errors\";\n\nimport levenshtein from 'fast-levenshtein';\n// const levenshtein = require('fast-levenshtein');\n\nconst RedefineableTokenSentinel = new Token(TokenType.AT, \"\", 0, 0, 0);\n\nclass Environment {\n    source: string;\n    // The parent of this environment\n    enclosing: Environment | null;\n    names: Map<string, Token>;\n    // Function names in the environment.\n    functions: Set<string>;\n    // Names that are from import bindings, like 'y' in `from x import y`.\n    // This only set at the top level environment. Child environments do not\n    // copy this field.\n    moduleBindings: Set<string>;\n    definedNames: Set<string>;\n    constructor(source: string, enclosing: Environment | null, names: Map<string, Token>) {\n        this.source = source;\n        this.enclosing = enclosing;\n        this.names = names;\n        this.functions = new Set();\n        this.moduleBindings = new Set();\n        this.definedNames = new Set();\n    }\n\n    /*\n    * Does a full lookup up the environment chain for a name.\n    * Returns the distance of the name from the current environment.\n    * If name isn't found, return -1.\n    * */\n    lookupName(identifier: Token): number {\n        const name = identifier.lexeme;\n        let distance = 0;\n        let curr: Environment | null = this;\n        while (curr !== null) {\n            if (curr.names.has(name)) {\n                break;\n            }\n            distance += 1;\n            curr = curr.enclosing;\n        }\n        return (curr === null) ? -1 : distance;\n    }\n\n    /* Looks up the name but only for the current environment. */\n    lookupNameCurrentEnv(identifier: Token): Token | undefined {\n        return this.names.get(identifier.lexeme);\n    }\n    lookupNameCurrentEnvWithError(identifier: Token) {\n        if (this.lookupName(identifier) < 0) {\n            throw new ResolverErrors.NameNotFoundError(identifier.line, identifier.col,\n                this.source,\n                identifier.indexInSource,\n                identifier.indexInSource + identifier.lexeme.length,\n                this.suggestName(identifier));\n        }\n    }\n    lookupNameParentEnvWithError(identifier: Token) {\n        const name = identifier.lexeme;\n        let parent = this.enclosing;\n        \n        if (parent === null || !parent.names.has(name)) {\n            throw new ResolverErrors.NameNotFoundError(identifier.line, identifier.col,\n                this.source,\n                identifier.indexInSource,\n                identifier.indexInSource + name.length,\n                this.suggestName(identifier));\n        }\n\n    }\n    declareName(identifier: Token) {\n        const lookup = this.lookupNameCurrentEnv(identifier);\n        if (lookup !== undefined && this.definedNames.has(identifier.lexeme)) { \n            throw new ResolverErrors.NameReassignmentError(identifier.line, identifier.col,\n                this.source,\n                identifier.indexInSource,\n                identifier.indexInSource + identifier.lexeme.length,\n                lookup);\n        }\n        if (lookup !== undefined && lookup !== RedefineableTokenSentinel) {\n            throw new ResolverErrors.NameReassignmentError(identifier.line, identifier.col,\n                this.source,\n                identifier.indexInSource,\n                identifier.indexInSource + identifier.lexeme.length,\n                lookup);\n\n        }\n        this.names.set(identifier.lexeme, identifier);\n        this.definedNames.add(identifier.lexeme);\n    }\n    // Same as declareName but allowed to re-declare later.\n    declarePlaceholderName(identifier: Token) {\n        const lookup = this.lookupNameCurrentEnv(identifier);\n        if (lookup !== undefined) {\n            throw new ResolverErrors.NameReassignmentError(identifier.line, identifier.col,\n                this.source,\n                identifier.indexInSource,\n                identifier.indexInSource + identifier.lexeme.length,\n                lookup);\n\n        }\n        this.names.set(identifier.lexeme, RedefineableTokenSentinel);\n    }    \n    suggestNameCurrentEnv(identifier: Token): string | null {\n        const name = identifier.lexeme;\n        let minDistance = Infinity;\n        let minName = null;\n        for (const declName of this.names.keys()) {\n            const dist = levenshtein.get(name, declName);\n            if (dist < minDistance) {\n                minDistance = dist;\n                minName = declName;\n            }\n        }\n        return minName;\n    }\n    /*\n    * Finds name closest to name in all environments up to builtin environment.\n    * Calculated using min levenshtein distance.\n    * */\n    suggestName(identifier: Token): string | null {\n        const name = identifier.lexeme;\n        let minDistance = Infinity;\n        let minName = null;\n        let curr: Environment | null = this;\n        while (curr !== null) {\n            for (const declName of curr.names.keys()) {\n                const dist = levenshtein.get(name, declName);\n                if (dist < minDistance) {\n                    minDistance = dist;\n                    minName = declName;\n                }\n            }\n            curr = curr.enclosing;\n        }\n        if (minDistance >= 4) {\n            // This is pretty far, so just return null\n            return null;\n        }\n        return minName;\n    }\n\n}\nexport class Resolver implements StmtNS.Visitor<void>, ExprNS.Visitor<void> {\n    source: string;\n    ast: Stmt;\n    // change the environment to be suite scope as in python\n    environment: Environment | null;\n    functionScope: Environment | null;\n    constructor(source: string, ast: Stmt) {\n        this.source = source;\n        this.ast = ast;\n        // The global environment\n        this.environment = new Environment(source, null, new Map([\n            // misc library\n            [\"_int\", new Token(TokenType.NAME, \"_int\", 0, 0, 0)],\n            [\"_int_from_string\", new Token(TokenType.NAME, \"_int_from_string\", 0, 0, 0)],\n            [\"abs\", new Token(TokenType.NAME, \"abs\", 0, 0, 0)],\n            [\"char_at\", new Token(TokenType.NAME, \"char_at\", 0, 0, 0)],\n            [\"error\", new Token(TokenType.NAME, \"error\", 0, 0, 0)],\n            [\"input\", new Token(TokenType.NAME, \"input\", 0, 0, 0)],\n            [\"isinstance\", new Token(TokenType.NAME, \"isinstance\", 0, 0, 0)],\n            [\"max\", new Token(TokenType.NAME, \"max\", 0, 0, 0)],\n            [\"min\", new Token(TokenType.NAME, \"min\", 0, 0, 0)],\n            [\"print\", new Token(TokenType.NAME, \"print\", 0, 0, 0)],\n            [\"random_random\", new Token(TokenType.NAME, \"random_random\", 0, 0, 0)],\n            [\"round\", new Token(TokenType.NAME, \"round\", 0, 0, 0)],\n            [\"str\", new Token(TokenType.NAME, \"str\", 0, 0, 0)],\n            [\"time_time\", new Token(TokenType.NAME, \"time_time\", 0, 0, 0)],            \n            \n            // math constants\n            [\"math_pi\", new Token(TokenType.NAME, \"math_pi\", 0, 0, 0)],\n            [\"math_e\", new Token(TokenType.NAME, \"math_e\", 0, 0, 0)],\n            [\"math_inf\", new Token(TokenType.NAME, \"math_inf\", 0, 0, 0)],\n            [\"math_nan\", new Token(TokenType.NAME, \"math_nan\", 0, 0, 0)],\n            [\"math_tau\", new Token(TokenType.NAME, \"math_tau\", 0, 0, 0)],\n            \n            // math library\n            [\"math_acos\", new Token(TokenType.NAME, \"math_acos\", 0, 0, 0)],\n            [\"math_acosh\", new Token(TokenType.NAME, \"math_acosh\", 0, 0, 0)],\n            [\"math_asin\", new Token(TokenType.NAME, \"math_asin\", 0, 0, 0)],\n            [\"math_asinh\", new Token(TokenType.NAME, \"math_asinh\", 0, 0, 0)],\n            [\"math_atan\", new Token(TokenType.NAME, \"math_atan\", 0, 0, 0)],\n            [\"math_atan2\", new Token(TokenType.NAME, \"math_atan2\", 0, 0, 0)],\n            [\"math_atanh\", new Token(TokenType.NAME, \"math_atanh\", 0, 0, 0)],\n            [\"math_cbrt\", new Token(TokenType.NAME, \"math_cbrt\", 0, 0, 0)],\n            [\"math_ceil\", new Token(TokenType.NAME, \"math_ceil\", 0, 0, 0)],\n            [\"math_comb\", new Token(TokenType.NAME, \"math_comb\", 0, 0, 0)],\n            [\"math_copysign\", new Token(TokenType.NAME, \"math_copysign\", 0, 0, 0)],\n            [\"math_cos\", new Token(TokenType.NAME, \"math_cos\", 0, 0, 0)],\n            [\"math_cosh\", new Token(TokenType.NAME, \"math_cosh\", 0, 0, 0)],\n            [\"math_degrees\", new Token(TokenType.NAME, \"math_degrees\", 0, 0, 0)],\n            [\"math_erf\", new Token(TokenType.NAME, \"math_erf\", 0, 0, 0)],\n            [\"math_erfc\", new Token(TokenType.NAME, \"math_erfc\", 0, 0, 0)],\n            [\"math_exp\", new Token(TokenType.NAME, \"math_exp\", 0, 0, 0)],\n            [\"math_exp2\", new Token(TokenType.NAME, \"math_exp2\", 0, 0, 0)],\n            [\"math_expm1\", new Token(TokenType.NAME, \"math_expm1\", 0, 0, 0)],\n            [\"math_fabs\", new Token(TokenType.NAME, \"math_fabs\", 0, 0, 0)],\n            [\"math_factorial\", new Token(TokenType.NAME, \"math_factorial\", 0, 0, 0)],\n            [\"math_floor\", new Token(TokenType.NAME, \"math_floor\", 0, 0, 0)],\n            [\"math_fma\", new Token(TokenType.NAME, \"math_fma\", 0, 0, 0)],\n            [\"math_fmod\", new Token(TokenType.NAME, \"math_fmod\", 0, 0, 0)],\n            [\"math_gamma\", new Token(TokenType.NAME, \"math_gamma\", 0, 0, 0)],\n            [\"math_gcd\", new Token(TokenType.NAME, \"math_gcd\", 0, 0, 0)],\n            [\"math_isfinite\", new Token(TokenType.NAME, \"math_isfinite\", 0, 0, 0)],\n            [\"math_isinf\", new Token(TokenType.NAME, \"math_isinf\", 0, 0, 0)],\n            [\"math_isnan\", new Token(TokenType.NAME, \"math_isnan\", 0, 0, 0)],\n            [\"math_isqrt\", new Token(TokenType.NAME, \"math_isqrt\", 0, 0, 0)],\n            [\"math_lcm\", new Token(TokenType.NAME, \"math_lcm\", 0, 0, 0)],\n            [\"math_ldexp\", new Token(TokenType.NAME, \"math_ldexp\", 0, 0, 0)],\n            [\"math_lgamma\", new Token(TokenType.NAME, \"math_lgamma\", 0, 0, 0)],\n            [\"math_log\", new Token(TokenType.NAME, \"math_log\", 0, 0, 0)],\n            [\"math_log10\", new Token(TokenType.NAME, \"math_log10\", 0, 0, 0)],\n            [\"math_log1p\", new Token(TokenType.NAME, \"math_log1p\", 0, 0, 0)],\n            [\"math_log2\", new Token(TokenType.NAME, \"math_log2\", 0, 0, 0)],\n            [\"math_nextafter\", new Token(TokenType.NAME, \"math_nextafter\", 0, 0, 0)],\n            [\"math_perm\", new Token(TokenType.NAME, \"math_perm\", 0, 0, 0)],\n            [\"math_pow\", new Token(TokenType.NAME, \"math_pow\", 0, 0, 0)],\n            [\"math_radians\", new Token(TokenType.NAME, \"math_radians\", 0, 0, 0)],\n            [\"math_remainder\", new Token(TokenType.NAME, \"math_remainder\", 0, 0, 0)],\n            [\"math_sin\", new Token(TokenType.NAME, \"math_sin\", 0, 0, 0)],\n            [\"math_sinh\", new Token(TokenType.NAME, \"math_sinh\", 0, 0, 0)],\n            [\"math_sqrt\", new Token(TokenType.NAME, \"math_sqrt\", 0, 0, 0)],\n            [\"math_tan\", new Token(TokenType.NAME, \"math_tan\", 0, 0, 0)],\n            [\"math_tanh\", new Token(TokenType.NAME, \"math_tanh\", 0, 0, 0)],\n            [\"math_trunc\", new Token(TokenType.NAME, \"math_trunc\", 0, 0, 0)],\n            [\"math_ulp\", new Token(TokenType.NAME, \"math_ulp\", 0, 0, 0)]   \n        ]));\n        this.functionScope = null;\n    }\n    resolve(stmt: Stmt[] | Stmt | Expr[] | Expr | null) {\n        if (stmt === null) {\n            return;\n        }\n        if (stmt instanceof Array) {\n            // Resolve all top-level functions first. Python allows functions declared after\n            // another function to be used in that function.\n            for (const st of stmt) {\n                if (st instanceof StmtNS.FunctionDef) {\n                    this.environment?.declarePlaceholderName(st.name);\n                }\n            }\n            for (const st of stmt) {\n                st.accept(this);\n            }\n        } else {\n            stmt.accept(this);\n        }\n    }\n\n    varDeclNames(names: Map<string, Token>): Token[] | null {\n        const res = Array.from(names.values())\n            .filter(name => (\n                // Filter out functions and module bindings.\n                // Those will be handled separately, so they don't\n                // need to be hoisted.\n                !this.environment?.functions.has(name.lexeme)\n                && !this.environment?.moduleBindings.has(name.lexeme)\n            ));\n        return res.length === 0 ? null : res;\n    }\n\n    functionVarConstraint(identifier: Token): void {\n        if (this.functionScope == null) {\n            return;\n        }\n        let curr = this.environment;\n        while (curr !== this.functionScope) {\n            if (curr !== null && curr.names.has(identifier.lexeme)) {\n                const token = curr.names.get(identifier.lexeme);\n                if (token === undefined) {\n                    throw new Error(\"placeholder error\")\n                }\n                throw new ResolverErrors.NameReassignmentError(identifier.line, identifier.col,\n                    this.source,\n                    identifier.indexInSource,\n                    identifier.indexInSource + identifier.lexeme.length,\n                    token);\n            }\n            curr = curr?.enclosing ?? null;\n        }\n    }\n\n    //// STATEMENTS\n    visitFileInputStmt(stmt: StmtNS.FileInput): void {\n        // Create a new environment.\n        const oldEnv = this.environment;\n        this.environment = new Environment(this.source, this.environment, new Map());\n        this.resolve(stmt.statements);\n        // Grab identifiers from that new environment. That are NOT functions.\n        // stmt.varDecls = this.varDeclNames(this.environment.names)\n        this.environment = oldEnv;\n    }\n\n    visitIndentCreation(stmt: StmtNS.Indent): void {\n        // Create a new environment\n        this.environment = new Environment(this.source, this.environment, new Map());\n    }\n\n    visitDedentCreation(stmt: StmtNS.Dedent): void {\n        // Switch to the previous environment.\n        if (this.environment?.enclosing !== undefined) {\n            this.environment = this.environment.enclosing;\n        }\n    }\n\n    visitFunctionDefStmt(stmt: StmtNS.FunctionDef) {\n        this.environment?.declareName(stmt.name);\n        this.environment?.functions.add(stmt.name.lexeme);\n\n        // Create a new environment.\n        const oldEnv = this.environment;\n        // Assign the parameters to the new environment.\n        const newEnv = new Map(\n            stmt.parameters.map(param => [param.lexeme, param])\n        );\n        this.environment = new Environment(this.source, this.environment, newEnv);\n        // const params = new Map(\n        //     stmt.parameters.map(param => [param.lexeme, param])\n        // );\n        // if (this.environment !== null) {\n        //     this.environment.names = params;\n        // }\n        this.functionScope = this.environment;\n        this.resolve(stmt.body);\n        // Grab identifiers from that new environment. That are NOT functions.\n        // stmt.varDecls = this.varDeclNames(this.environment.names)\n        // Restore old environment\n        this.functionScope = null;\n        this.environment = oldEnv;\n    }\n\n    visitAnnAssignStmt(stmt: StmtNS.AnnAssign): void {\n        this.resolve(stmt.ann);\n        this.resolve(stmt.value);\n        this.functionVarConstraint(stmt.name);\n        this.environment?.declareName(stmt.name);\n    }\n\n    visitAssignStmt(stmt: StmtNS.Assign): void {\n        this.resolve(stmt.value);\n        this.functionVarConstraint(stmt.name);\n        this.environment?.declareName(stmt.name);\n    }\n\n    visitAssertStmt(stmt: StmtNS.Assert): void {\n        this.resolve(stmt.value);\n    }\n    visitForStmt(stmt: StmtNS.For): void {\n        this.environment?.declareName(stmt.target);\n        this.resolve(stmt.iter);\n        this.resolve(stmt.body);\n    }\n\n    visitIfStmt(stmt: StmtNS.If): void {\n        this.resolve(stmt.condition);\n        this.resolve(stmt.body);\n        this.resolve(stmt.elseBlock);\n    }\n    // @TODO we need to treat all global statements as variable declarations in the global\n    // scope.\n    visitGlobalStmt(stmt: StmtNS.Global): void {\n        // Do nothing because global can also be declared in our\n        // own scope.\n    }\n    // @TODO nonlocals mean that any variable following that name in the current env\n    // should not create a variable declaration, but instead point to an outer variable.\n    visitNonLocalStmt(stmt: StmtNS.NonLocal): void {\n        this.environment?.lookupNameParentEnvWithError(stmt.name);\n    }\n\n    visitReturnStmt(stmt: StmtNS.Return): void {\n        if (stmt.value !== null) {\n            this.resolve(stmt.value);\n        }\n    }\n\n    visitWhileStmt(stmt: StmtNS.While): void {\n        this.resolve(stmt.condition);\n        this.resolve(stmt.body);\n    }\n    visitSimpleExprStmt(stmt: StmtNS.SimpleExpr): void {\n        this.resolve(stmt.expression);\n    }\n\n    visitFromImportStmt(stmt: StmtNS.FromImport): void {\n        for (const name of stmt.names) {\n            this.environment?.declareName(name);\n            this.environment?.moduleBindings.add(name.lexeme);\n        }\n    }\n\n    visitContinueStmt(stmt: StmtNS.Continue): void {\n    }\n    visitBreakStmt(stmt: StmtNS.Break): void {\n    }\n    visitPassStmt(stmt: StmtNS.Pass): void {\n    }\n\n\n\n\n\n    //// EXPRESSIONS\n    visitVariableExpr(expr: ExprNS.Variable): void {\n        this.environment?.lookupNameCurrentEnvWithError(expr.name);\n    }\n    visitLambdaExpr(expr: ExprNS.Lambda): void {\n        // Create a new environment.\n        const oldEnv = this.environment;\n        // Assign the parameters to the new environment.\n        const newEnv = new Map(\n            expr.parameters.map(param => [param.lexeme, param])\n        );\n        this.environment = new Environment(this.source, this.environment, newEnv);\n        this.resolve(expr.body);\n        // Restore old environment\n        this.environment = oldEnv;\n    }\n    visitMultiLambdaExpr(expr: ExprNS.MultiLambda): void {\n        // Create a new environment.\n        const oldEnv = this.environment;\n        // Assign the parameters to the new environment.\n        const newEnv = new Map(\n            expr.parameters.map(param => [param.lexeme, param])\n        );\n        this.environment = new Environment(this.source, this.environment, newEnv);\n        this.resolve(expr.body);\n        // Grab identifiers from that new environment.\n        expr.varDecls = Array.from(this.environment.names.values());\n        // Restore old environment\n        this.environment = oldEnv;\n    }\n    visitUnaryExpr(expr: ExprNS.Unary): void {\n        this.resolve(expr.right);\n    }\n    visitGroupingExpr(expr: ExprNS.Grouping): void {\n        this.resolve(expr.expression);\n    }\n    visitBinaryExpr(expr: ExprNS.Binary): void {\n        this.resolve(expr.left);\n        this.resolve(expr.right);\n    }\n    visitBoolOpExpr(expr: ExprNS.BoolOp): void {\n        this.resolve(expr.left);\n        this.resolve(expr.right);\n    }\n    visitCompareExpr(expr: ExprNS.Compare): void {\n        this.resolve(expr.left);\n        this.resolve(expr.right);\n    }\n\n    visitCallExpr(expr: ExprNS.Call): void {\n        this.resolve(expr.callee);\n        this.resolve(expr.args);\n    }\n    visitTernaryExpr(expr: ExprNS.Ternary): void {\n        this.resolve(expr.predicate);\n        this.resolve(expr.consequent);\n        this.resolve(expr.alternative);\n    }\n    visitNoneExpr(expr: ExprNS.None): void {\n    }\n    visitLiteralExpr(expr: ExprNS.Literal): void {\n    }\n    visitBigIntLiteralExpr(expr: ExprNS.BigIntLiteral): void {\n    }\n    visitComplexExpr(expr: ExprNS.Complex): void {\n    }\n\n}\n","// Simplified error implementation\n// TODO: make it more correct in the future after the import is working\n\n// Base class\nexport abstract class ModuleError extends Error {\n    public abstract type: string;\n    constructor(message: string) {\n    super(message);\n    }\n}\n\n// Error for when a module cannot be fetched from the network\nexport class ModuleConnectionError extends ModuleError {\n    public type = 'ModuleConnectionError';\n    constructor() {\n    super('Unable to connect to module servers');\n    }\n}\n\n// Error for when something goes wrong inside a module's code\nexport class ModuleInternalError extends ModuleError {\n    public type = 'ModuleInternalError';\n    constructor(public moduleName: string, public error: any) {\n    super(`Error in module ${moduleName}:\\n${error.message}`);\n    }\n}","import { PyContext } from \"../cse-machine/py_context\"\n\n/**\n * Returns a function that simulates the job of Node's `require`. The require\n * provider is then used by Source modules to access the context and py-slang standard\n * library\n */\nexport const getRequireProvider = (context: PyContext) => (x: string) => {\n  const pathSegments = x.split('/')\n\n  const recurser = (obj: Record<string, any>, segments: string[]): any => {\n    if (segments.length === 0) return obj\n    const currObj = obj[segments[0]]\n    if (currObj !== undefined) return recurser(currObj, segments.splice(1))\n    throw new Error(`Dynamic require of ${x} is not supported`)\n  }\n\n  const exports = {\n    'py-slang': {\n      context,\n    },\n  }\n\n  return recurser(exports, pathSegments);\n};\n\nexport type RequireProvider = ReturnType<typeof getRequireProvider>","import { PyContext } from '../cse-machine/py_context';\nimport { ModuleConnectionError, ModuleInternalError } from './errors';\nimport { getRequireProvider } from './requireProvider';\n\n// Using a default static URL as a fallback.\nexport let MODULES_STATIC_URL = 'https://source-academy.github.io/modules';\n\nexport function setModulesStaticURL(url: string) {\n    MODULES_STATIC_URL = url;\n}\n\n// Module cache for performance and circular dependency resolution.\nconst moduleCache = new Map<string, Promise<any>>();\n\nexport async function loadModuleBundle(\n    moduleName: string,\n    context: PyContext,\n): Promise<any> {\n    if (moduleCache.has(moduleName)) {\n    return moduleCache.get(moduleName);\n    }\n\n    const loadPromise = (async () => {\n    const bundleUrl = `${MODULES_STATIC_URL}/bundles/${moduleName}.js`;\n    try {\n        const response = await fetch(bundleUrl);\n        if (!response.ok) {\n        throw new ModuleConnectionError();\n        }\n        const bundleText = await response.text();\n        const require = getRequireProvider(context);\n\n        // Execute the module bundle as an IIFE.\n        const moduleIIFE = new Function('require', bundleText);\n        return moduleIIFE(require);\n    } catch (error) {\n        if (error instanceof ModuleConnectionError) {\n        throw error;\n        }\n        // Wrap other errors as a ModuleInternalError.\n        throw new ModuleInternalError(moduleName, error);\n    }\n    })();\n\n    moduleCache.set(moduleName, loadPromise);\n    return loadPromise;\n}","var O;!function(O){O[O.VOID=0]=\"VOID\",O[O.BOOLEAN=1]=\"BOOLEAN\",O[O.NUMBER=2]=\"NUMBER\",O[O.CONST_STRING=3]=\"CONST_STRING\",O[O.EMPTY_LIST=4]=\"EMPTY_LIST\",O[O.PAIR=5]=\"PAIR\",O[O.ARRAY=6]=\"ARRAY\",O[O.CLOSURE=7]=\"CLOSURE\",O[O.OPAQUE=8]=\"OPAQUE\",O[O.LIST=9]=\"LIST\"}(O||(O={}));export{O as DataType};\n//# sourceMappingURL=index.js.map\n","var a;!function(a){a[a.HELLO=0]=\"HELLO\",a[a.ABORT=1]=\"ABORT\",a[a.ENTRY=2]=\"ENTRY\"}(a||(a={}));export{a as S};\n//# sourceMappingURL=ServiceMessageType-BXlK0ft1.js.map\n","var O;!function(O){O[O.PROTOCOL_VERSION=0]=\"PROTOCOL_VERSION\",O[O.PROTOCOL_MIN_VERSION=0]=\"PROTOCOL_MIN_VERSION\",O[O.SETUP_MESSAGES_BUFFER_SIZE=10]=\"SETUP_MESSAGES_BUFFER_SIZE\"}(O||(O={}));export{O as C};\n//# sourceMappingURL=Constant-CYzoK6Kj.js.map\n","var N;!function(N){N[N.ONLINE=0]=\"ONLINE\",N[N.EVAL_READY=1]=\"EVAL_READY\",N[N.RUNNING=2]=\"RUNNING\",N[N.WAITING=3]=\"WAITING\",N[N.BREAKPOINT=4]=\"BREAKPOINT\",N[N.STOPPED=5]=\"STOPPED\",N[N.ERROR=6]=\"ERROR\"}(N||(N={}));export{N as R};\n//# sourceMappingURL=RunnerStatus-Vg091wbM.js.map\n","import {\n    IDataHandler,\n    IFunctionSignature,\n    TypedValue,\n    DataType,\n    ExternCallable\n} from '@sourceacademy/conductor/types';\nimport { PyContext } from '../cse-machine/py_context';\nimport { JsClosure } from '../cse-machine/py_closure';\n\nexport class PyDataHandler implements IDataHandler {\n    public readonly hasDataInterface= true;\n\n    constructor(private context: PyContext) {}\n\n    async closure_make<const Arg extends readonly DataType[], const Ret extends DataType>(\n        sig: IFunctionSignature<Arg, Ret>,\n        func: ExternCallable<Arg, Ret>,\n    ): Promise<TypedValue<DataType.CLOSURE, Ret>> {\n        const jsClosure = new JsClosure(sig, func, this.context);\n\n        return {\n            type: DataType.CLOSURE,\n            value: jsClosure as any,\n        };\n    }\n\n    async pair_make(head: TypedValue<DataType>, tail: TypedValue<DataType>): Promise<TypedValue<DataType.PAIR>> {\n        return Promise.reject(new Error('Method not implemented'));\n    }\n    async pair_head(p: TypedValue<DataType.PAIR>): Promise<TypedValue<DataType>> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async pair_sethead(p: TypedValue<DataType.PAIR>, tv: TypedValue<DataType>): Promise<void> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async pair_tail(p: TypedValue<DataType.PAIR>): Promise<TypedValue<DataType>> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async pair_settail(p: TypedValue<DataType.PAIR>, tv: TypedValue<DataType>): Promise<void> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async pair_assert(p: TypedValue<DataType.PAIR>, headType?: DataType, tailType?: DataType): Promise<void> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async array_make<T extends DataType>(t: T, len: number, init?: TypedValue<any>): Promise<TypedValue<DataType.ARRAY, T>> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async array_length(a: TypedValue<DataType.ARRAY, DataType>): Promise<number> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async array_get(a: TypedValue<DataType.ARRAY, DataType.VOID>, idx: number): Promise<TypedValue<DataType>>;\n    async array_get<T extends DataType>(a: TypedValue<DataType.ARRAY, T>, idx: number): Promise<TypedValue<T>> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async array_type<T extends DataType>(a: TypedValue<DataType.ARRAY, T>): Promise<T> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async array_set(a: TypedValue<DataType.ARRAY, DataType.VOID>, idx: number, tv: TypedValue<DataType>): Promise<void>;\n    async array_set<T extends DataType>(a: TypedValue<DataType.ARRAY, T>, idx: number, tv: TypedValue<T>): Promise<void> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async array_assert<T extends DataType>(a: TypedValue<DataType.ARRAY, DataType>, type?: T, length?: number): Promise<void> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async closure_is_vararg(c: TypedValue<DataType.CLOSURE, DataType>): Promise<boolean> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async closure_arity(c: TypedValue<DataType.CLOSURE, DataType>): Promise<number> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async closure_call<T extends DataType>(c: TypedValue<DataType.CLOSURE, T>, args: TypedValue<DataType>[], returnType: T): Promise<TypedValue<T>> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async closure_call_unchecked<T extends DataType>(c: TypedValue<DataType.CLOSURE, T>, args: TypedValue<DataType>[]): Promise<TypedValue<T>>{\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async closure_arity_assert(c: TypedValue<DataType.CLOSURE, DataType>, arity: number): Promise<void> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async opaque_make(v: any, immutable?: boolean): Promise<TypedValue<DataType.OPAQUE>> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async opaque_get(o: TypedValue<DataType.OPAQUE>): Promise<any> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async opaque_update(o: TypedValue<DataType.OPAQUE>, v: any): Promise<void> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async tie(dependent: TypedValue<DataType>, dependee: TypedValue<DataType> | null): Promise<void> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async untie(dependent: TypedValue<DataType>, dependee: TypedValue<DataType> | null): Promise<void> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async list(...elements: TypedValue<DataType>[]): Promise<TypedValue<DataType.LIST>> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async is_list(xs: TypedValue<DataType.LIST>): Promise<boolean> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async list_to_vec(xs: TypedValue<DataType.LIST>): Promise<TypedValue<DataType>[]> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async accumulate<T extends Exclude<DataType, void>>(op: TypedValue<DataType.CLOSURE, T>, initial: TypedValue<T>, sequence: TypedValue<DataType.LIST>, resultType: T): Promise<TypedValue<T>> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n    async length(xs: TypedValue<DataType.LIST>): Promise<number> {\n        return Promise.reject(new Error('Method not implemented.'));\n    }\n}","import { PyContext } from '../cse-machine/py_context';\nimport { StmtNS } from '../ast-types';\nimport { IRunnerPlugin } from '@sourceacademy/conductor/runner';\nimport { pyDefineVariable } from '../cse-machine/py_utils';\nimport { loadModuleBundle } from './loader';\nimport { PyDataHandler } from '../conductor/PyDataHandler';\n\ntype Stmt = StmtNS.Stmt;\n\nfunction findImportedModules(program: Stmt): string[] {\n  const moduleNames = new Set<string>();\n\n  function traverse(node: any) {\n    if (!node || typeof node !== 'object') {\n      return;\n    }\n\n    if (node.constructor.name === 'FromImport') {\n      const importNode = node as StmtNS.FromImport;\n      moduleNames.add(importNode.module.lexeme);\n    }\n\n    for (const key in node) {\n      if (node.hasOwnProperty(key)) {\n        const child = node[key];\n        if (Array.isArray(child)) {\n          child.forEach(traverse);\n        } else {\n          traverse(child);\n        }\n      }\n    }\n  }\n  traverse(program);\n  return Array.from(moduleNames);\n}\nexport async function preloadModules(context: PyContext, ast: Stmt) {\n    const conductor = context.nativeStorage.conductor as IRunnerPlugin | undefined;\n\n    if (!conductor) {\n        return;\n    }\n\n    const moduleNames = findImportedModules(ast);\n    if (moduleNames.length === 0) {\n        return;\n    }\n\n    const rawModules = await Promise.all(\n        moduleNames.map(name => loadModuleBundle(name, context))\n    );\n\n    const dataHandler = new PyDataHandler(context);\n    const loadedModules: Record<string, any> = {};\n\n    for (let i = 0; i < moduleNames.length; i++) {\n        const moduleName = moduleNames[i];\n        const rawModule = rawModules[i];\n        const processedModule: Record<string, any> = {};\n\n        for (const funcName in rawModule) {\n        const signature = { args: [], returnType: 0 };\n        const typedValue = await dataHandler.closure_make(signature, rawModule[funcName]);\n        processedModule[funcName] = typedValue.value;\n        }\n        loadedModules[moduleName] = processedModule;\n    }\n\n    const globalEnv = context.runtime.environments[context.runtime.environments.length - 1];\n    for (const moduleName in loadedModules) {\n        pyDefineVariable(context, moduleName, loadedModules[moduleName], globalEnv);\n    }\n}","import { PyContext } from \"../cse-machine/py_context\";\nimport { PyCSEResultPromise, PyEvaluate } from \"../cse-machine/py_interpreter\";\nimport { RecursivePartial, Result } from \"../types\";\nimport { Tokenizer } from \"../tokenizer\";\nimport { Parser } from \"../parser\";\nimport { Resolver } from \"../resolver\";\nimport { StmtNS } from \"../ast-types\";\nimport { preloadModules } from \"../modules/preprocessor\";\n\ntype Stmt = StmtNS.Stmt;\n\nexport interface IOptions {\n  isPrelude: boolean;\n  envSteps: number;\n  stepLimit: number;\n}\n\nfunction findImportedModules(program: Stmt): string[] {\n  const moduleNames = new Set<string>();\n\n  function traverse(node: any) {\n    if (!node || typeof node !== 'object') {\n      return;\n    }\n\n    if (node.constructor.name === 'FromImport') {\n      const importNode = node as StmtNS.FromImport;\n      moduleNames.add(importNode.module.lexeme);\n    }\n\n    for (const key in node) {\n      if (node.hasOwnProperty(key)) {\n        const child = node[key];\n        if (Array.isArray(child)) {\n          child.forEach(traverse);\n        } else {\n          traverse(child);\n        }\n      }\n    }\n  }\n  traverse(program);\n  return Array.from(moduleNames);\n}\n\nexport async function runPyAST(\n    code: string,\n    variant: number = 1,\n    doValidate: boolean = false\n): Promise<Stmt> {\n    const script = code + \"\\n\";\n    const tokenizer = new Tokenizer(script);\n    const tokens = tokenizer.scanEverything();\n    const pyParser = new Parser(script, tokens);\n    const ast = pyParser.parse();\n    if (doValidate) {\n      new Resolver(code, ast).resolve(ast);\n    }\n    return ast;\n};\n\nexport async function PyRunInContext(\n  code: string,\n  context: PyContext,\n  options: RecursivePartial<IOptions> = {},\n): Promise<Result> {\n  const ast = await runPyAST(code, 1, true);\n  await preloadModules(context, ast);\n  const result = PyRunCSEMachine(code, ast, context, options);\n  return result;\n}\n\nexport function PyRunCSEMachine(\n  code: string,\n  program: Stmt,\n  context: PyContext,\n  options: RecursivePartial<IOptions> = {}\n): Promise<Result> {\n    const result = PyEvaluate(code, program, context, options as IOptions); \n    return PyCSEResultPromise(context, result);\n}\n","// Value.ts\nimport { ExprNS, StmtNS } from '../ast-types';\nimport { Closure } from './closure';\nimport { Environment } from './environment';\nimport { Stack } from './stack';\nimport { PyComplexNumber } from \"../types\";\n\n/**\n * Value represents various runtime values in Python.\n */\nexport type Value = any \n  // | NumberValue\n  // | BoolValue\n  // | StringValue\n  // | ComplexValue\n  // | FunctionValue\n  // | LambdaValue\n  // | MultiLambdaValue\n  // | ErrorValue\n  // | UndefinedValue\n  // | BigIntValue\n  // | pyClosureValue;\n\nexport interface pyClosureValue {\n  type: \"closure\";\n  closure: Closure;\n}\n\nexport interface BigIntValue {\n  type: 'bigint';\n  value: bigint;\n}\n\nexport interface NumberValue {\n  type: 'number';\n  value: number;\n}\n\nexport interface BoolValue {\n  type: 'bool';\n  value: boolean;\n}\n\nexport interface StringValue {\n  type: 'string';\n  value: string;\n}\n\nexport interface ComplexValue {\n  type: 'complex';\n  value: PyComplexNumber;\n}\n\nexport interface FunctionValue {\n  type: 'function';\n  name: string;\n  params: string[];\n  body: StmtNS.Stmt[];\n  env: Environment;\n}\n\nexport interface LambdaValue {\n  type: 'lambda';\n  parameters: string[];\n  body: ExprNS.Expr;\n  env: Environment;\n}\n\nexport interface MultiLambdaValue {\n  type: 'multi_lambda';\n  parameters: string[];\n  body: StmtNS.Stmt[];\n  varDecls: string[];\n  env: Environment;\n}\n\nexport interface ErrorValue {\n  type: 'error';\n  message: string;\n}\n\n// TODO: Merge undefined and None.\nexport interface UndefinedValue {\n  type: 'undefined';\n}\n\nexport class Stash extends Stack<Value> {\n  public constructor() {\n    super();\n  }\n\n  public copy(): Stash {\n    const newStash = new Stash();\n    const stackCopy = super.getStack();\n    newStash.push(...stackCopy);\n    return newStash;\n  }\n}\n","import { Stash, Value } from './stash';\nimport { PyControl, PyControlItem } from './py_control';\nimport { createSimpleEnvironment, createProgramEnvironment, PyEnvironment } from './py_environment';\nimport { CseError } from './error';\nimport { Heap } from './heap';\nimport { PyNode } from './py_types';\nimport { NativeStorage } from '../types';\nimport { StmtNS } from '../ast-types';\n\nexport class PyContext {\n  public control: PyControl;\n  public stash: Stash;\n  public output: string = '';\n  //public environment: Environment;\n  public errors: CseError[] = [];\n\n  runtime: {\n    break: boolean\n    debuggerOn: boolean\n    isRunning: boolean\n    environmentTree: EnvTree\n    environments: PyEnvironment[]\n    nodes: PyNode[]\n    control: PyControl | null\n    stash: Stash | null\n    objectCount: number\n    envStepsTotal: number\n    breakpointSteps: number[]\n    changepointSteps: number[]\n  }\n  \n  /**\n   * Used for storing the native context and other values\n   */\n  nativeStorage: NativeStorage\n\n  constructor(program?: StmtNS.Stmt, context?: PyContext) {\n    this.control = new PyControl(program);\n    this.stash = new Stash();\n    this.runtime = this.createEmptyRuntime();\n    //this.environment = createProgramEnvironment(context || this, false);\n    if (this.runtime.environments.length === 0) {\n      const globalEnvironment = this.createGlobalEnvironment()\n      this.runtime.environments.push(globalEnvironment)\n      this.runtime.environmentTree.insert(globalEnvironment)\n    }\n    this.nativeStorage = {\n      builtins: new Map<string, Value>(),\n      previousProgramsIdentifiers: new Set<string>(),\n      operators: new Map<string, (...operands: Value[]) => Value>(),\n      maxExecTime: 1000,\n      //evaller: null,\n      loadedModules: {},\n      loadedModuleTypes: {},\n      conductor: null as any,\n    }\n  }\n\n  createGlobalEnvironment = (): PyEnvironment => ({\n    tail: null,\n    name: 'global',\n    head: {},\n    heap: new Heap(),\n    id: '-1'\n  })\n\n  createEmptyRuntime = () => ({\n    break: false,\n    debuggerOn: true,\n    isRunning: false,\n    environmentTree: new EnvTree(),\n    environments: [],\n    value: undefined,\n    nodes: [],\n    control: null,\n    stash: null,\n    objectCount: 0,\n    envSteps: -1,\n    envStepsTotal: 0,\n    breakpointSteps: [],\n    changepointSteps: []\n  })\n\n  public reset(program?: StmtNS.Stmt): void {\n    this.control = new PyControl(program);\n    this.stash = new Stash();\n    //this.environment = createProgramEnvironment(this, false);\n    this.errors = []; \n  }\n\n  public copy(): PyContext {\n    const newContext = new PyContext();\n    newContext.control = this.control.copy();\n    newContext.stash = this.stash.copy();\n    //newContext.environments = this.copyEnvironment(this.environments);\n    return newContext;\n  }\n\n  private copyEnvironment(env: PyEnvironment): PyEnvironment {\n    const newTail = env.tail ? this.copyEnvironment(env.tail) : null;\n    const newEnv: PyEnvironment = {\n      id: env.id, \n      name: env.name,\n      tail: newTail,\n      head: { ...env.head },\n      heap: new Heap(),\n      callExpression: env.callExpression, \n      thisContext: env.thisContext\n    };\n    return newEnv;\n  }\n}\n\nexport class EnvTree {\n  private _root: EnvTreeNode | null = null\n  private map = new Map<PyEnvironment, EnvTreeNode>()\n\n  get root(): EnvTreeNode | null {\n    return this._root\n  }\n\n  public insert(environment: PyEnvironment): void {\n    const tailEnvironment = environment.tail\n    if (tailEnvironment === null) {\n      if (this._root === null) {\n        this._root = new EnvTreeNode(environment, null)\n        this.map.set(environment, this._root)\n      }\n    } else {\n      const parentNode = this.map.get(tailEnvironment)\n      if (parentNode) {\n        const childNode = new EnvTreeNode(environment, parentNode)\n        parentNode.addChild(childNode)\n        this.map.set(environment, childNode)\n      }\n    }\n  }\n\n  public getTreeNode(environment: PyEnvironment): EnvTreeNode | undefined {\n    return this.map.get(environment)\n  }\n}\n\nexport class EnvTreeNode {\n  private _children: EnvTreeNode[] = []\n\n  constructor(readonly environment: PyEnvironment, public parent: EnvTreeNode | null) {}\n\n  get children(): EnvTreeNode[] {\n    return this._children\n  }\n\n  public resetChildren(newChildren: EnvTreeNode[]): void {\n    this.clearChildren()\n    this.addChildren(newChildren)\n    newChildren.forEach(c => (c.parent = this))\n  }\n\n  private clearChildren(): void {\n    this._children = []\n  }\n\n  private addChildren(newChildren: EnvTreeNode[]): void {\n    this._children.push(...newChildren)\n  }\n\n  public addChild(newChild: EnvTreeNode): EnvTreeNode {\n    this._children.push(newChild)\n    return newChild\n  }\n}\n","// This file is adapted from:\n// https://github.com/source-academy/conductor\n// Original author(s): Source Academy Team\n\nimport { PyRunInContext, IOptions } from \"../runner/pyRunner\";\nimport { PyContext } from \"../cse-machine/py_context\";\nimport { \n  IInterfacableEvaluator,\n  IRunnerPlugin, \n} from \"@sourceacademy/conductor/runner\";\nimport { IDataHandler } from '@sourceacademy/conductor/types';\nimport { Finished } from \"../types\";\nimport { PyDataHandler } from \"./PyDataHandler\";\n\nconst defaultContext = new PyContext();\nconst defaultOptions: IOptions = {\n  isPrelude: false,\n  envSteps: 100000,\n  stepLimit: 100000,\n};\n\nexport default class PyEvaluator implements IInterfacableEvaluator {\n  private context: PyContext;\n  private options: IOptions;\n  private dataHandler: PyDataHandler;\n\n  public readonly hasDataInterface = true;\n  \n  constructor(private conductor: IRunnerPlugin) {\n    this.context = defaultContext;\n    this.options = defaultOptions;\n    this.dataHandler = new PyDataHandler(this.context);\n    this.context.nativeStorage.conductor = this.conductor;\n\n    this.closure_make = this.dataHandler.closure_make.bind(this.dataHandler);\n    this.pair_make = this.dataHandler.pair_make.bind(this.dataHandler);\n    this.pair_head = this.dataHandler.pair_head.bind(this.dataHandler);\n    this.pair_sethead = this.dataHandler.pair_sethead.bind(this.dataHandler);\n    this.pair_tail = this.dataHandler.pair_tail.bind(this.dataHandler);\n    this.pair_settail = this.dataHandler.pair_settail.bind(this.dataHandler);\n    this.pair_assert = this.dataHandler.pair_assert.bind(this.dataHandler);\n    this.array_make = this.dataHandler.array_make.bind(this.dataHandler);\n    this.array_length = this.dataHandler.array_length.bind(this.dataHandler);\n    this.array_get = this.dataHandler.array_get.bind(this.dataHandler);\n    this.array_type = this.dataHandler.array_type.bind(this.dataHandler);\n    this.array_set = this.dataHandler.array_set.bind(this.dataHandler);\n    this.array_assert = this.dataHandler.array_assert.bind(this.dataHandler);\n    this.closure_is_vararg = this.dataHandler.closure_is_vararg.bind(this.dataHandler);\n    this.closure_arity = this.dataHandler.closure_arity.bind(this.dataHandler);\n    this.closure_call = this.dataHandler.closure_call.bind(this.dataHandler);\n    this.closure_call_unchecked = this.dataHandler.closure_call_unchecked.bind(this.dataHandler);\n    this.closure_arity_assert = this.dataHandler.closure_arity_assert.bind(this.dataHandler);\n    this.opaque_make = this.dataHandler.opaque_make.bind(this.dataHandler);\n    this.opaque_get = this.dataHandler.opaque_get.bind(this.dataHandler);\n    this.opaque_update = this.dataHandler.opaque_update.bind(this.dataHandler);\n    this.tie = this.dataHandler.tie.bind(this.dataHandler);\n    this.untie = this.dataHandler.untie.bind(this.dataHandler);\n    this.list = this.dataHandler.list.bind(this.dataHandler);\n    this.is_list = this.dataHandler.is_list.bind(this.dataHandler);\n    this.list_to_vec = this.dataHandler.list_to_vec.bind(this.dataHandler);\n    this.accumulate = this.dataHandler.accumulate.bind(this.dataHandler);\n    this.length = this.dataHandler.length.bind(this.dataHandler);\n  }\n  public closure_make: IDataHandler['closure_make'];\n  public pair_make: IDataHandler['pair_make'];\n  public pair_head: IDataHandler['pair_head'];\n  public pair_sethead: IDataHandler['pair_sethead'];\n  public pair_tail: IDataHandler['pair_tail'];\n  public pair_settail: IDataHandler['pair_settail'];\n  public pair_assert: IDataHandler['pair_assert'];\n  public array_make: IDataHandler['array_make'];\n  public array_length: IDataHandler['array_length'];\n  public array_get: IDataHandler['array_get'];\n  public array_type: IDataHandler['array_type'];\n  public array_set: IDataHandler['array_set'];\n  public array_assert: IDataHandler['array_assert'];\n  public closure_is_vararg: IDataHandler['closure_is_vararg'];\n  public closure_arity: IDataHandler['closure_arity'];\n  public closure_call: IDataHandler['closure_call'];\n  public closure_call_unchecked: IDataHandler['closure_call_unchecked'];\n  public closure_arity_assert: IDataHandler['closure_arity_assert'];\n  public opaque_make: IDataHandler['opaque_make'];\n  public opaque_get: IDataHandler['opaque_get'];\n  public opaque_update: IDataHandler['opaque_update'];\n  public tie: IDataHandler['tie'];\n  public untie: IDataHandler['untie'];\n  public list: IDataHandler['list'];\n  public is_list: IDataHandler['is_list'];\n  public list_to_vec: IDataHandler['list_to_vec'];\n  public accumulate: IDataHandler['accumulate'];\n  public length: IDataHandler['length'];\n\n  async startEvaluator(entrypoint: string): Promise<void> {\n    return this.evaluateChunk(entrypoint);\n}\n\n\n  async evaluateChunk(chunk: string): Promise<void> {\n    try {\n      const result = await PyRunInContext(\n        chunk,\n        this.context,\n        this.options\n      );\n      this.conductor.sendOutput(\n        `${(result as Finished).representation.toString()}`\n      );\n    } catch (error) {\n      this.conductor.sendOutput(\n        `Error: ${error instanceof Error ? error.message : error}`\n      );\n    }\n  }\n}"],"names":["ErrorType","ErrorSeverity","getFullLine","createErrorIndicator","instrCreator.unOpInstr","instrCreator.binOpInstr","instrCreator.boolOpInstr","assmtInstr","instrCreator.assmtInstr","instrCreator.appInstr","instrCreator.branchInstr","instrCreator.resetInstr","instrCreator.endOfFunctionBodyInstr","O","DataType"],"mappings":"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","x_google_ignoreList":[21,22,27,28,29,30]}