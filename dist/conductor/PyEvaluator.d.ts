import { IInterfacableEvaluator, IRunnerPlugin } from "@sourceacademy/conductor/runner";
import { IDataHandler } from '@sourceacademy/conductor/types';
export default class PyEvaluator implements IInterfacableEvaluator {
    private conductor;
    private context;
    private options;
    private dataHandler;
    readonly hasDataInterface = true;
    constructor(conductor: IRunnerPlugin);
    closure_make: IDataHandler['closure_make'];
    pair_make: IDataHandler['pair_make'];
    pair_head: IDataHandler['pair_head'];
    pair_sethead: IDataHandler['pair_sethead'];
    pair_tail: IDataHandler['pair_tail'];
    pair_settail: IDataHandler['pair_settail'];
    pair_assert: IDataHandler['pair_assert'];
    array_make: IDataHandler['array_make'];
    array_length: IDataHandler['array_length'];
    array_get: IDataHandler['array_get'];
    array_type: IDataHandler['array_type'];
    array_set: IDataHandler['array_set'];
    array_assert: IDataHandler['array_assert'];
    closure_is_vararg: IDataHandler['closure_is_vararg'];
    closure_arity: IDataHandler['closure_arity'];
    closure_call: IDataHandler['closure_call'];
    closure_call_unchecked: IDataHandler['closure_call_unchecked'];
    closure_arity_assert: IDataHandler['closure_arity_assert'];
    opaque_make: IDataHandler['opaque_make'];
    opaque_get: IDataHandler['opaque_get'];
    opaque_update: IDataHandler['opaque_update'];
    tie: IDataHandler['tie'];
    untie: IDataHandler['untie'];
    list: IDataHandler['list'];
    is_list: IDataHandler['is_list'];
    list_to_vec: IDataHandler['list_to_vec'];
    accumulate: IDataHandler['accumulate'];
    length: IDataHandler['length'];
    startEvaluator(entrypoint: string): Promise<void>;
    evaluateChunk(chunk: string): Promise<void>;
}
